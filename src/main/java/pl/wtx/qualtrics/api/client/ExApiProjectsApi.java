/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.BatchGetParticipantResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.EX360CopyRequest;
import pl.wtx.qualtrics.api.client.model.EvaluatorImportBody;
import java.io.File;
import pl.wtx.qualtrics.api.client.model.JobId;
import pl.wtx.qualtrics.api.client.model.JobInfo;
import pl.wtx.qualtrics.api.client.model.JobResult;
import pl.wtx.qualtrics.api.client.model.MetadataFilter;
import pl.wtx.qualtrics.api.client.model.ParticipantImportBody;
import pl.wtx.qualtrics.api.client.model.ParticipantResponse;
import pl.wtx.qualtrics.api.client.model.ParticipantsSearchRequest;
import pl.wtx.qualtrics.api.client.model.SubjectImportBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExApiProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExApiProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExApiProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copyEvaluatorsInProject
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyEvaluatorsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ex360CopyRequest;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-evaluators"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyEvaluatorsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling copyEvaluatorsInProject(Async)");
        }

        return copyEvaluatorsInProjectCall(projectId, ex360CopyRequest, _callback);

    }

    /**
     * Copy EX 360 Evaluators
     * Copy evaluators identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Evaluator&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId copyEvaluatorsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest) throws ApiException {
        ApiResponse<JobId> localVarResp = copyEvaluatorsInProjectWithHttpInfo(projectId, ex360CopyRequest);
        return localVarResp.getData();
    }

    /**
     * Copy EX 360 Evaluators
     * Copy evaluators identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Evaluator&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> copyEvaluatorsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest) throws ApiException {
        okhttp3.Call localVarCall = copyEvaluatorsInProjectValidateBeforeCall(projectId, ex360CopyRequest, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy EX 360 Evaluators (asynchronously)
     * Copy evaluators identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Evaluator&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyEvaluatorsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyEvaluatorsInProjectValidateBeforeCall(projectId, ex360CopyRequest, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyParticipantsInProject
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers to be copied in the project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyParticipantsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyParticipantsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling copyParticipantsInProject(Async)");
        }

        return copyParticipantsInProjectCall(projectId, requestBody, _callback);

    }

    /**
     * Copy Participants
     * Copy participants identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Participant&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers to be copied in the project. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId copyParticipantsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        ApiResponse<JobId> localVarResp = copyParticipantsInProjectWithHttpInfo(projectId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Copy Participants
     * Copy participants identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Participant&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers to be copied in the project. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> copyParticipantsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = copyParticipantsInProjectValidateBeforeCall(projectId, requestBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy Participants (asynchronously)
     * Copy participants identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Participant&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers to be copied in the project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyParticipantsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyParticipantsInProjectValidateBeforeCall(projectId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copySubjectsInProject
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySubjectsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ex360CopyRequest;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-subjects"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copySubjectsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling copySubjectsInProject(Async)");
        }

        return copySubjectsInProjectCall(projectId, ex360CopyRequest, _callback);

    }

    /**
     * Copy EX 360 Subjects
     * Copy subjects identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Subject&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId copySubjectsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest) throws ApiException {
        ApiResponse<JobId> localVarResp = copySubjectsInProjectWithHttpInfo(projectId, ex360CopyRequest);
        return localVarResp.getData();
    }

    /**
     * Copy EX 360 Subjects
     * Copy subjects identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Subject&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> copySubjectsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest) throws ApiException {
        okhttp3.Call localVarCall = copySubjectsInProjectValidateBeforeCall(projectId, ex360CopyRequest, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy EX 360 Subjects (asynchronously)
     * Copy subjects identified by given list of &#x60;uniqueIdentifier&#x60; from employee directory to project. Subject&#39;s metadata in employee directory is also copied into project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param ex360CopyRequest List of Unique Identifiers to be copied in the project. List is limited to 5,000 Unique Identifiers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySubjectsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EX360CopyRequest ex360CopyRequest, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = copySubjectsInProjectValidateBeforeCall(projectId, ex360CopyRequest, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteParticipantsInProject
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/delete-participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteParticipantsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteParticipantsInProject(Async)");
        }

        return deleteParticipantsInProjectCall(projectId, requestBody, _callback);

    }

    /**
     * Delete Participants
     * Start participants deletion from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId deleteParticipantsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        ApiResponse<JobId> localVarResp = deleteParticipantsInProjectWithHttpInfo(projectId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Delete Participants
     * Start participants deletion from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> deleteParticipantsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteParticipantsInProjectValidateBeforeCall(projectId, requestBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Participants (asynchronously)
     * Start participants deletion from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteParticipantsInProjectValidateBeforeCall(projectId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportNominationsFromProject
     * @param projectId Id of a specific EX 360 project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportNominationsFromProjectCall(@javax.annotation.Nonnull String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-nominations"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportNominationsFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportNominationsFromProject(Async)");
        }

        return exportNominationsFromProjectCall(projectId, _callback);

    }

    /**
     * Export EX 360 Nominations
     * Start nominations export from the specified EX 360 project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX 360 project (required)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId exportNominationsFromProject(@javax.annotation.Nonnull String projectId) throws ApiException {
        ApiResponse<JobId> localVarResp = exportNominationsFromProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Export EX 360 Nominations
     * Start nominations export from the specified EX 360 project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX 360 project (required)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> exportNominationsFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId) throws ApiException {
        okhttp3.Call localVarCall = exportNominationsFromProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export EX 360 Nominations (asynchronously)
     * Start nominations export from the specified EX 360 project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX 360 project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportNominationsFromProjectAsync(@javax.annotation.Nonnull String projectId, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportNominationsFromProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportParticipantsFromProject
     * @param projectId Id of a specific EX project (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportParticipantsFromProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataFilter;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportParticipantsFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportParticipantsFromProject(Async)");
        }

        return exportParticipantsFromProjectCall(projectId, metadataFilter, _callback);

    }

    /**
     * Export Participants
     * Start participants export from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX project (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId exportParticipantsFromProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter) throws ApiException {
        ApiResponse<JobId> localVarResp = exportParticipantsFromProjectWithHttpInfo(projectId, metadataFilter);
        return localVarResp.getData();
    }

    /**
     * Export Participants
     * Start participants export from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX project (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> exportParticipantsFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter) throws ApiException {
        okhttp3.Call localVarCall = exportParticipantsFromProjectValidateBeforeCall(projectId, metadataFilter, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Participants (asynchronously)
     * Start participants export from the specified EX project.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId Id of a specific EX project (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportParticipantsFromProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportParticipantsFromProjectValidateBeforeCall(projectId, metadataFilter, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopyEvaluatorsJobInProject
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyEvaluatorsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-evaluators/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopyEvaluatorsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopyEvaluatorsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCopyEvaluatorsJobInProject(Async)");
        }

        return getCopyEvaluatorsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Copy EX 360 Evaluators Status
     * Retrieves the status of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getCopyEvaluatorsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getCopyEvaluatorsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Copy EX 360 Evaluators Status
     * Retrieves the status of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getCopyEvaluatorsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getCopyEvaluatorsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Copy EX 360 Evaluators Status (asynchronously)
     * Retrieves the status of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyEvaluatorsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopyEvaluatorsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopyEvaluatorsJobResultInProject
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Evaluators API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyEvaluatorsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-evaluators/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopyEvaluatorsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopyEvaluatorsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getCopyEvaluatorsJobResultInProject(Async)");
        }

        return getCopyEvaluatorsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Copy EX 360 Evaluators Job
     * Retrieves the results of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Evaluators API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getCopyEvaluatorsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getCopyEvaluatorsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Copy EX 360 Evaluators Job
     * Retrieves the results of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Evaluators API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getCopyEvaluatorsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getCopyEvaluatorsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Copy EX 360 Evaluators Job (asynchronously)
     * Retrieves the results of the copy evaluators job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Evaluators API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyEvaluatorsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopyEvaluatorsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopyParticipantsJobInProject
     * @param projectId ID of the EX project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyParticipantsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-participants/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopyParticipantsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopyParticipantsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCopyParticipantsJobInProject(Async)");
        }

        return getCopyParticipantsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Copy Participants Status
     * Retrieves the status of the copy participants job, in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getCopyParticipantsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getCopyParticipantsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Copy Participants Status
     * Retrieves the status of the copy participants job, in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getCopyParticipantsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getCopyParticipantsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Copy Participants Status (asynchronously)
     * Retrieves the status of the copy participants job, in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyParticipantsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopyParticipantsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopyParticipantsJobResultInProject
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Copy Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyParticipantsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-participants/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopyParticipantsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopyParticipantsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getCopyParticipantsJobResultInProject(Async)");
        }

        return getCopyParticipantsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Project Copy Participants Job
     * Retrieves the results of the copy participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Copy Participants Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getCopyParticipantsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getCopyParticipantsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Project Copy Participants Job
     * Retrieves the results of the copy participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Copy Participants Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getCopyParticipantsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getCopyParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Project Copy Participants Job (asynchronously)
     * Retrieves the results of the copy participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Copy Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopyParticipantsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopyParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopySubjectsJobInProject
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopySubjectsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-subjects/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopySubjectsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopySubjectsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getCopySubjectsJobInProject(Async)");
        }

        return getCopySubjectsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Copy EX 360 Subjects Status
     * Retrieves the status of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getCopySubjectsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getCopySubjectsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Copy EX 360 Subjects Status
     * Retrieves the status of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getCopySubjectsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getCopySubjectsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Copy EX 360 Subjects Status (asynchronously)
     * Retrieves the status of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopySubjectsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopySubjectsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCopySubjectsJobResultInProject
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Subjects API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopySubjectsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/copy-subjects/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCopySubjectsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCopySubjectsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getCopySubjectsJobResultInProject(Async)");
        }

        return getCopySubjectsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Copy EX 360 Subjects Job
     * Retrieves the results of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Subjects API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getCopySubjectsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getCopySubjectsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Copy EX 360 Subjects Job
     * Retrieves the results of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Subjects API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getCopySubjectsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getCopySubjectsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Copy EX 360 Subjects Job (asynchronously)
     * Retrieves the results of the copy subjects job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Copy EX 360 Subjects API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCopySubjectsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCopySubjectsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeleteParticipantsJobInProject
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/delete-participants/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeleteParticipantsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDeleteParticipantsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getDeleteParticipantsJobInProject(Async)");
        }

        return getDeleteParticipantsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Delete Participants Status
     * Retrieves the status of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getDeleteParticipantsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getDeleteParticipantsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Delete Participants Status
     * Retrieves the status of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getDeleteParticipantsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getDeleteParticipantsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Delete Participants Status (asynchronously)
     * Retrieves the status of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeleteParticipantsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeleteParticipantsJobResultInProject
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/delete-participants/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeleteParticipantsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDeleteParticipantsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getDeleteParticipantsJobResultInProject(Async)");
        }

        return getDeleteParticipantsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Project Delete Participants Job
     * Retrieves the results of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getDeleteParticipantsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getDeleteParticipantsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Project Delete Participants Job
     * Retrieves the results of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getDeleteParticipantsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getDeleteParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Project Delete Participants Job (asynchronously)
     * Retrieves the results of the delete participants job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeleteParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportNominationsJobFromProject
     * @param projectId Id of a specific EX 360 project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportNominationsJobFromProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-nominations/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportNominationsJobFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getExportNominationsJobFromProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getExportNominationsJobFromProject(Async)");
        }

        return getExportNominationsJobFromProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Export EX 360 Nominations Status
     * Retrieves the status of the export nominations job from the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getExportNominationsJobFromProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getExportNominationsJobFromProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Export EX 360 Nominations Status
     * Retrieves the status of the export nominations job from the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getExportNominationsJobFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getExportNominationsJobFromProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export EX 360 Nominations Status (asynchronously)
     * Retrieves the status of the export nominations job from the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportNominationsJobFromProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportNominationsJobFromProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportNominationsJobResultFromProject
     * @param projectId Id of a specific EX 360 project (required)
     * @param resultId Result ID from the Export Nominations Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportNominationsJobResultFromProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-nominations/results/{resultId}/file"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportNominationsJobResultFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getExportNominationsJobResultFromProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getExportNominationsJobResultFromProject(Async)");
        }

        return getExportNominationsJobResultFromProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for EX 360 project Export Nominations Job
     * Retrieve the results of the nominations export job in the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param resultId Result ID from the Export Nominations Status API response (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getExportNominationsJobResultFromProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<File> localVarResp = getExportNominationsJobResultFromProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for EX 360 project Export Nominations Job
     * Retrieve the results of the nominations export job in the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param resultId Result ID from the Export Nominations Status API response (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getExportNominationsJobResultFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getExportNominationsJobResultFromProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for EX 360 project Export Nominations Job (asynchronously)
     * Retrieve the results of the nominations export job in the specified EX 360 project.
     * @param projectId Id of a specific EX 360 project (required)
     * @param resultId Result ID from the Export Nominations Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportNominationsJobResultFromProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportNominationsJobResultFromProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportParticipantsJobFromProject
     * @param projectId Id of a specific EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobFromProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-participants/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportParticipantsJobFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getExportParticipantsJobFromProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getExportParticipantsJobFromProject(Async)");
        }

        return getExportParticipantsJobFromProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Export Participants Status
     * Retrieves the status of the export participants job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getExportParticipantsJobFromProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getExportParticipantsJobFromProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Export Participants Status
     * Retrieves the status of the export participants job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getExportParticipantsJobFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getExportParticipantsJobFromProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export Participants Status (asynchronously)
     * Retrieves the status of the export participants job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobFromProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportParticipantsJobFromProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportParticipantsJobResultFromProject
     * @param projectId Id of a specific EX project (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobResultFromProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/export-participants/results/{resultId}/file"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportParticipantsJobResultFromProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getExportParticipantsJobResultFromProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getExportParticipantsJobResultFromProject(Async)");
        }

        return getExportParticipantsJobResultFromProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for EX project Export Participants Job
     * Retrieve the results of the participants export job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getExportParticipantsJobResultFromProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<File> localVarResp = getExportParticipantsJobResultFromProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for EX project Export Participants Job
     * Retrieve the results of the participants export job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getExportParticipantsJobResultFromProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getExportParticipantsJobResultFromProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for EX project Export Participants Job (asynchronously)
     * Retrieve the results of the participants export job in the specified EX project.
     * @param projectId Id of a specific EX project (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobResultFromProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportParticipantsJobResultFromProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportEvaluatorsJobInProject
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportEvaluatorsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-evaluators/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportEvaluatorsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportEvaluatorsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getImportEvaluatorsJobInProject(Async)");
        }

        return getImportEvaluatorsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Import EX 360 Evaluators Status
     * Retrieves the status of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getImportEvaluatorsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getImportEvaluatorsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Import EX 360 Evaluators Status
     * Retrieves the status of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getImportEvaluatorsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getImportEvaluatorsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Import EX 360 Evaluators Status (asynchronously)
     * Retrieves the status of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportEvaluatorsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportEvaluatorsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportEvaluatorsJobResultInProject
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Evaluators Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportEvaluatorsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-evaluators/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportEvaluatorsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportEvaluatorsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getImportEvaluatorsJobResultInProject(Async)");
        }

        return getImportEvaluatorsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Project Import EX 360 Evaluators Job
     * Retrieves the results of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Evaluators Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getImportEvaluatorsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getImportEvaluatorsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Project Import EX 360 Evaluators Job
     * Retrieves the results of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Evaluators Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getImportEvaluatorsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getImportEvaluatorsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Project Import EX 360 Evaluators Job (asynchronously)
     * Retrieves the results of the evaluators addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Evaluators Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportEvaluatorsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportEvaluatorsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportParticipantsJobInProject
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-participants/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportParticipantsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportParticipantsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getImportParticipantsJobInProject(Async)");
        }

        return getImportParticipantsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Import Status
     * Retrieves the status of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getImportParticipantsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getImportParticipantsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Import Status
     * Retrieves the status of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getImportParticipantsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getImportParticipantsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Import Status (asynchronously)
     * Retrieves the status of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportParticipantsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportParticipantsJobResultInProject
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-participants/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportParticipantsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportParticipantsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getImportParticipantsJobResultInProject(Async)");
        }

        return getImportParticipantsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Project Import Participants Job
     * Returns the results of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getImportParticipantsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getImportParticipantsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Project Import Participants Job
     * Returns the results of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getImportParticipantsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getImportParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Project Import Participants Job (asynchronously)
     * Returns the results of the participants addition or updates job in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportParticipantsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportSubjectsJobInProject
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportSubjectsJobInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-subjects/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportSubjectsJobInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportSubjectsJobInProject(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getImportSubjectsJobInProject(Async)");
        }

        return getImportSubjectsJobInProjectCall(projectId, jobId, _callback);

    }

    /**
     * Get Import EX 360 Subjects Status
     * Retrieves the status of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getImportSubjectsJobInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getImportSubjectsJobInProjectWithHttpInfo(projectId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Import EX 360 Subjects Status
     * Retrieves the status of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getImportSubjectsJobInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getImportSubjectsJobInProjectValidateBeforeCall(projectId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Import EX 360 Subjects Status (asynchronously)
     * Retrieves the status of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param jobId ID of the job for which you want the status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportSubjectsJobInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportSubjectsJobInProjectValidateBeforeCall(projectId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportSubjectsJobResultInProject
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Subjects Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportSubjectsJobResultInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-subjects/results/{resultId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportSubjectsJobResultInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getImportSubjectsJobResultInProject(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getImportSubjectsJobResultInProject(Async)");
        }

        return getImportSubjectsJobResultInProjectCall(projectId, resultId, _callback);

    }

    /**
     * Get Results for Project Import EX 360 Subjects Job
     * Retrieves the results of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Subjects Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getImportSubjectsJobResultInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getImportSubjectsJobResultInProjectWithHttpInfo(projectId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Project Import EX 360 Subjects Job
     * Retrieves the results of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Subjects Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getImportSubjectsJobResultInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getImportSubjectsJobResultInProjectValidateBeforeCall(projectId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Project Import EX 360 Subjects Job (asynchronously)
     * Retrieves the results of the subjects addition or updates job in the specified EX 360 project.
     * @param projectId ID of the EX 360 project (required)
     * @param resultId Result ID from the Import EX 360 Subjects Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportSubjectsJobResultInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportSubjectsJobResultInProjectValidateBeforeCall(projectId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantByIdInProject
     * @param projectId ID of the EX project (required)
     * @param participantId ID of the Participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantByIdInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/participants/{participantId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantByIdInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getParticipantByIdInProject(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getParticipantByIdInProject(Async)");
        }

        return getParticipantByIdInProjectCall(projectId, participantId, _callback);

    }

    /**
     * Get Specific Participant
     * Retrieves the specified participant in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param participantId ID of the Participant (required)
     * @return ParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantResponse getParticipantByIdInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String participantId) throws ApiException {
        ApiResponse<ParticipantResponse> localVarResp = getParticipantByIdInProjectWithHttpInfo(projectId, participantId);
        return localVarResp.getData();
    }

    /**
     * Get Specific Participant
     * Retrieves the specified participant in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param participantId ID of the Participant (required)
     * @return ApiResponse&lt;ParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantResponse> getParticipantByIdInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String participantId) throws ApiException {
        okhttp3.Call localVarCall = getParticipantByIdInProjectValidateBeforeCall(projectId, participantId, null);
        Type localVarReturnType = new TypeToken<ParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Specific Participant (asynchronously)
     * Retrieves the specified participant in the specified EX project.
     * @param projectId ID of the EX project (required)
     * @param participantId ID of the Participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantByIdInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nonnull String participantId, final ApiCallback<ParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantByIdInProjectValidateBeforeCall(projectId, participantId, _callback);
        Type localVarReturnType = new TypeToken<ParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsInProject
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data should be included or not (default). (optional, default to false)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (includeParticipantData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParticipantData", includeParticipantData));
        }

        if (uniqueIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueIdentifier", uniqueIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getParticipantsInProject(Async)");
        }

        return getParticipantsInProjectCall(projectId, includeMetadata, skipToken, pageSize, includeParticipantData, uniqueIdentifier, _callback);

    }

    /**
     * Get Participants [Deprecated]
     * Please use the POST API instead. Gets all participants, in the specified EX project.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data should be included or not (default). (optional, default to false)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @return BatchGetParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetParticipantResponse getParticipantsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable String uniqueIdentifier) throws ApiException {
        ApiResponse<BatchGetParticipantResponse> localVarResp = getParticipantsInProjectWithHttpInfo(projectId, includeMetadata, skipToken, pageSize, includeParticipantData, uniqueIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get Participants [Deprecated]
     * Please use the POST API instead. Gets all participants, in the specified EX project.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data should be included or not (default). (optional, default to false)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @return ApiResponse&lt;BatchGetParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetParticipantResponse> getParticipantsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable String uniqueIdentifier) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsInProjectValidateBeforeCall(projectId, includeMetadata, skipToken, pageSize, includeParticipantData, uniqueIdentifier, null);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Participants [Deprecated] (asynchronously)
     * Please use the POST API instead. Gets all participants, in the specified EX project.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data should be included or not (default). (optional, default to false)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback<BatchGetParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsInProjectValidateBeforeCall(projectId, includeMetadata, skipToken, pageSize, includeParticipantData, uniqueIdentifier, _callback);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsInProjectPost
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data for EE project or subject data for 360 project should be included or not (default). (optional, default to false)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInProjectPostCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = participantsSearchRequest;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (includeParticipantData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParticipantData", includeParticipantData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsInProjectPostValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getParticipantsInProjectPost(Async)");
        }

        return getParticipantsInProjectPostCall(projectId, includeMetadata, pageSize, includeParticipantData, participantsSearchRequest, _callback);

    }

    /**
     * Get Participants Post
     * Retrieves all participants in the specified EX project.  &lt;!-- theme: warning --&gt; &gt;#### Only use &#x60;skipToken&#x60; parameter after first request &gt; &gt;You should only use the &#x60;skipToken&#x60; parameter when it is returned in the response body after your first call to the API. Use the &#x60;skipToken&#x60; parameter to paginate through the response.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data for EE project or subject data for 360 project should be included or not (default). (optional, default to false)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @return BatchGetParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetParticipantResponse getParticipantsInProjectPost(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest) throws ApiException {
        ApiResponse<BatchGetParticipantResponse> localVarResp = getParticipantsInProjectPostWithHttpInfo(projectId, includeMetadata, pageSize, includeParticipantData, participantsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Get Participants Post
     * Retrieves all participants in the specified EX project.  &lt;!-- theme: warning --&gt; &gt;#### Only use &#x60;skipToken&#x60; parameter after first request &gt; &gt;You should only use the &#x60;skipToken&#x60; parameter when it is returned in the response body after your first call to the API. Use the &#x60;skipToken&#x60; parameter to paginate through the response.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data for EE project or subject data for 360 project should be included or not (default). (optional, default to false)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @return ApiResponse&lt;BatchGetParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetParticipantResponse> getParticipantsInProjectPostWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsInProjectPostValidateBeforeCall(projectId, includeMetadata, pageSize, includeParticipantData, participantsSearchRequest, null);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Participants Post (asynchronously)
     * Retrieves all participants in the specified EX project.  &lt;!-- theme: warning --&gt; &gt;#### Only use &#x60;skipToken&#x60; parameter after first request &gt; &gt;You should only use the &#x60;skipToken&#x60; parameter when it is returned in the response body after your first call to the API. Use the &#x60;skipToken&#x60; parameter to paginate through the response.
     * @param projectId ID of the EX project (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param includeParticipantData Whether participant data for EE project or subject data for 360 project should be included or not (default). (optional, default to false)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInProjectPostAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Boolean includeParticipantData, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback<BatchGetParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsInProjectPostValidateBeforeCall(projectId, includeMetadata, pageSize, includeParticipantData, participantsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importEvaluatorsInProject
     * @param projectId ID of the EX 360 project (required)
     * @param evaluatorImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing evaluators. When importing with JSON, only metadata fields that are common across all imported evaluators will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; EvaluatorUniqueIdentifier,FirstName,LastName,EvaluatorEmail,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-evaluators \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myEvaluators.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importEvaluatorsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EvaluatorImportBody evaluatorImportBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluatorImportBody;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-evaluators"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importEvaluatorsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EvaluatorImportBody evaluatorImportBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importEvaluatorsInProject(Async)");
        }

        return importEvaluatorsInProjectCall(projectId, evaluatorImportBody, _callback);

    }

    /**
     * Import EX 360 Evaluators
     * Start addition of new or existing evaluators to the specified EX 360 project. Existing evaluators should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new evaluators are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param evaluatorImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing evaluators. When importing with JSON, only metadata fields that are common across all imported evaluators will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; EvaluatorUniqueIdentifier,FirstName,LastName,EvaluatorEmail,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-evaluators \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myEvaluators.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId importEvaluatorsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EvaluatorImportBody evaluatorImportBody) throws ApiException {
        ApiResponse<JobId> localVarResp = importEvaluatorsInProjectWithHttpInfo(projectId, evaluatorImportBody);
        return localVarResp.getData();
    }

    /**
     * Import EX 360 Evaluators
     * Start addition of new or existing evaluators to the specified EX 360 project. Existing evaluators should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new evaluators are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param evaluatorImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing evaluators. When importing with JSON, only metadata fields that are common across all imported evaluators will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; EvaluatorUniqueIdentifier,FirstName,LastName,EvaluatorEmail,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-evaluators \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myEvaluators.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> importEvaluatorsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EvaluatorImportBody evaluatorImportBody) throws ApiException {
        okhttp3.Call localVarCall = importEvaluatorsInProjectValidateBeforeCall(projectId, evaluatorImportBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import EX 360 Evaluators (asynchronously)
     * Start addition of new or existing evaluators to the specified EX 360 project. Existing evaluators should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new evaluators are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param evaluatorImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing evaluators. When importing with JSON, only metadata fields that are common across all imported evaluators will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; EvaluatorUniqueIdentifier,FirstName,LastName,EvaluatorEmail,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-evaluators \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myEvaluators.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importEvaluatorsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable EvaluatorImportBody evaluatorImportBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = importEvaluatorsInProjectValidateBeforeCall(projectId, evaluatorImportBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importParticipantsInProject
     * @param projectId ID of the EX project (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importParticipantsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = participantImportBody;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-participants"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importParticipantsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importParticipantsInProject(Async)");
        }

        return importParticipantsInProjectCall(projectId, participantImportBody, _callback);

    }

    /**
     * Import Participants
     * Start addition of new or existing participants to the specified EX project. Existing participants should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new participants are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId importParticipantsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable ParticipantImportBody participantImportBody) throws ApiException {
        ApiResponse<JobId> localVarResp = importParticipantsInProjectWithHttpInfo(projectId, participantImportBody);
        return localVarResp.getData();
    }

    /**
     * Import Participants
     * Start addition of new or existing participants to the specified EX project. Existing participants should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new participants are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> importParticipantsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable ParticipantImportBody participantImportBody) throws ApiException {
        okhttp3.Call localVarCall = importParticipantsInProjectValidateBeforeCall(projectId, participantImportBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import Participants (asynchronously)
     * Start addition of new or existing participants to the specified EX project. Existing participants should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new participants are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX project (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importParticipantsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = importParticipantsInProjectValidateBeforeCall(projectId, participantImportBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importSubjectsInProject
     * @param projectId ID of the EX 360 project (required)
     * @param subjectImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing subjects. When importing with JSON, only metadata fields that are common across all imported subjects will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-subjects \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;mySubjects.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSubjectsInProjectCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable SubjectImportBody subjectImportBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subjectImportBody;

        // create path and map variables
        String localVarPath = "/ex-projects/{projectId}/import-subjects"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importSubjectsInProjectValidateBeforeCall(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable SubjectImportBody subjectImportBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importSubjectsInProject(Async)");
        }

        return importSubjectsInProjectCall(projectId, subjectImportBody, _callback);

    }

    /**
     * Import EX 360 Subjects
     * Start addition of new or existing subjects to the specified EX 360 project. Existing subjects should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new subjects are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param subjectImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing subjects. When importing with JSON, only metadata fields that are common across all imported subjects will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-subjects \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;mySubjects.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId importSubjectsInProject(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable SubjectImportBody subjectImportBody) throws ApiException {
        ApiResponse<JobId> localVarResp = importSubjectsInProjectWithHttpInfo(projectId, subjectImportBody);
        return localVarResp.getData();
    }

    /**
     * Import EX 360 Subjects
     * Start addition of new or existing subjects to the specified EX 360 project. Existing subjects should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new subjects are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param subjectImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing subjects. When importing with JSON, only metadata fields that are common across all imported subjects will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-subjects \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;mySubjects.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> importSubjectsInProjectWithHttpInfo(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable SubjectImportBody subjectImportBody) throws ApiException {
        okhttp3.Call localVarCall = importSubjectsInProjectValidateBeforeCall(projectId, subjectImportBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import EX 360 Subjects (asynchronously)
     * Start addition of new or existing subjects to the specified EX 360 project. Existing subjects should be in employee directory based on &#x60;uniqueIdentifier&#x60;. If new subjects are added, they are also added to employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param projectId ID of the EX 360 project (required)
     * @param subjectImportBody You can send a JSON object directly in an &#x60;application/json&#x60; call for importing subjects. When importing with JSON, only metadata fields that are common across all imported subjects will be honored for the import - all others will be excluded. Alternatively, you can create a CSV file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;, and the file will need to look like the example below:   &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/ex-projects/&lt;your project id&gt;/import-subjects \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;mySubjects.csv\&quot;&#39; &#x60;&#x60;&#x60; File size is limited to 100 MB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importSubjectsInProjectAsync(@javax.annotation.Nonnull String projectId, @javax.annotation.Nullable SubjectImportBody subjectImportBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = importSubjectsInProjectValidateBeforeCall(projectId, subjectImportBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
