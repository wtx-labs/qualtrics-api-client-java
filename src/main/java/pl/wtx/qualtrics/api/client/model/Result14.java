/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import pl.wtx.qualtrics.api.client.model.RequestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Result14
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Result14 {
  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  @javax.annotation.Nullable
  private String fileId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  @javax.annotation.Nonnull
  private Double percentComplete;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private RequestStatus status;

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "continuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  @javax.annotation.Nullable
  private String continuationToken;

  public Result14() {
  }

  public Result14 fileId(@javax.annotation.Nullable String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * Get fileId
   * @return fileId
   */
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }

  public void setFileId(@javax.annotation.Nullable String fileId) {
    this.fileId = fileId;
  }


  public Result14 percentComplete(@javax.annotation.Nonnull Double percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Indicates current completion of the export, in a percentage.
   * @return percentComplete
   */
  @javax.annotation.Nonnull
  public Double getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(@javax.annotation.Nonnull Double percentComplete) {
    this.percentComplete = percentComplete;
  }


  public Result14 status(@javax.annotation.Nonnull RequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RequestStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull RequestStatus status) {
    this.status = status;
  }


  public Result14 continuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  /**
   * The next continuation token needed to get all responses recorded since this export and not included in this export.
   * @return continuationToken
   */
  @javax.annotation.Nullable
  public String getContinuationToken() {
    return continuationToken;
  }

  public void setContinuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result14 result14 = (Result14) o;
    return Objects.equals(this.fileId, result14.fileId) &&
        Objects.equals(this.percentComplete, result14.percentComplete) &&
        Objects.equals(this.status, result14.status) &&
        Objects.equals(this.continuationToken, result14.continuationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, percentComplete, status, continuationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result14 {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileId");
    openapiFields.add("percentComplete");
    openapiFields.add("status");
    openapiFields.add("continuationToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("percentComplete");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result14
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result14.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result14 is not found in the empty JSON string", Result14.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result14.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result14` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Result14.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileId") != null && !jsonObj.get("fileId").isJsonNull()) && !jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      // validate the required field `status`
      RequestStatus.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("continuationToken") != null && !jsonObj.get("continuationToken").isJsonNull()) && !jsonObj.get("continuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuationToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result14.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result14' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result14> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result14.class));

       return (TypeAdapter<T>) new TypeAdapter<Result14>() {
           @Override
           public void write(JsonWriter out, Result14 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result14 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result14 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result14
   * @throws IOException if the JSON string is invalid with respect to Result14
   */
  public static Result14 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result14.class);
  }

  /**
   * Convert an instance of Result14 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

