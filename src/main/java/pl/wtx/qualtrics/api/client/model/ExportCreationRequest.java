/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ExportCreationRequest {
  /**
   * The format of the export file. This can be one of: &#x60;csv&#x60;, &#x60;tsv&#x60;, &#x60;spss&#x60;, or &#x60;excel&#x60;
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("csv"),
    
    TSV("tsv"),
    
    SPSS("spss"),
    
    EXCEL("excel");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nonnull
  private FormatEnum format = FormatEnum.CSV;

  public static final String SERIALIZED_NAME_COMPRESS = "compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  @javax.annotation.Nullable
  private Boolean compress = true;

  public static final String SERIALIZED_NAME_FORMAT_DECIMAL_AS_COMMA = "formatDecimalAsComma";
  @SerializedName(SERIALIZED_NAME_FORMAT_DECIMAL_AS_COMMA)
  @javax.annotation.Nullable
  private Boolean formatDecimalAsComma = false;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_NEWLINE_REPLACEMENT = "newlineReplacement";
  @SerializedName(SERIALIZED_NAME_NEWLINE_REPLACEMENT)
  @javax.annotation.Nullable
  private String newlineReplacement;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  @javax.annotation.Nullable
  private String timeZone = "UTC";

  public static final String SERIALIZED_NAME_USE_LABELS = "useLabels";
  @SerializedName(SERIALIZED_NAME_USE_LABELS)
  @javax.annotation.Nullable
  private Boolean useLabels = false;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime startDate = OffsetDateTime.parse("1970-01-01T02:00+01:00[Europe/Warsaw]", java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME.withZone(java.time.ZoneId.systemDefault()));

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime endDate = OffsetDateTime.parse("2100-01-01T02:00+01:00[Europe/Warsaw]", java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME.withZone(java.time.ZoneId.systemDefault()));

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "continuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  @javax.annotation.Nullable
  private String continuationToken;

  public static final String SERIALIZED_NAME_ALLOW_CONTINUATION = "allowContinuation";
  @SerializedName(SERIALIZED_NAME_ALLOW_CONTINUATION)
  @javax.annotation.Nullable
  private Boolean allowContinuation = false;

  public static final String SERIALIZED_NAME_SORT_BY_LAST_MODIFIED_DATE = "sortByLastModifiedDate";
  @SerializedName(SERIALIZED_NAME_SORT_BY_LAST_MODIFIED_DATE)
  @javax.annotation.Nullable
  private Boolean sortByLastModifiedDate = false;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private List<String> fields = new ArrayList<>();

  public ExportCreationRequest() {
  }

  public ExportCreationRequest format(@javax.annotation.Nonnull FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * The format of the export file. This can be one of: &#x60;csv&#x60;, &#x60;tsv&#x60;, &#x60;spss&#x60;, or &#x60;excel&#x60;
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nonnull FormatEnum format) {
    this.format = format;
  }


  public ExportCreationRequest compress(@javax.annotation.Nullable Boolean compress) {
    this.compress = compress;
    return this;
  }

  /**
   * Compress the final export file as a ZIP file. Exporting without compression is only recommended for small exports. Large exports may encounter issues when downloading the large files. It is possible in the future that if an export size is too large uncompressed, this flag will be ignored and it will be compressed anyway.
   * @return compress
   */
  @javax.annotation.Nullable
  public Boolean getCompress() {
    return compress;
  }

  public void setCompress(@javax.annotation.Nullable Boolean compress) {
    this.compress = compress;
  }


  public ExportCreationRequest formatDecimalAsComma(@javax.annotation.Nullable Boolean formatDecimalAsComma) {
    this.formatDecimalAsComma = formatDecimalAsComma;
    return this;
  }

  /**
   * If true, use a comma as a decimal separator instead of a period. 
   * @return formatDecimalAsComma
   */
  @javax.annotation.Nullable
  public Boolean getFormatDecimalAsComma() {
    return formatDecimalAsComma;
  }

  public void setFormatDecimalAsComma(@javax.annotation.Nullable Boolean formatDecimalAsComma) {
    this.formatDecimalAsComma = formatDecimalAsComma;
  }


  public ExportCreationRequest limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Maximum number of records to export.
   * minimum: 0
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public ExportCreationRequest newlineReplacement(@javax.annotation.Nullable String newlineReplacement) {
    this.newlineReplacement = newlineReplacement;
    return this;
  }

  /**
   * If set, replace newline characters in records with this value. Note: this parameter is only relevant for CSV and TSV.
   * @return newlineReplacement
   */
  @javax.annotation.Nullable
  public String getNewlineReplacement() {
    return newlineReplacement;
  }

  public void setNewlineReplacement(@javax.annotation.Nullable String newlineReplacement) {
    this.newlineReplacement = newlineReplacement;
  }


  public ExportCreationRequest timeZone(@javax.annotation.Nullable String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * &lt;p&gt;Timezone used to determine response date values. Data is recorded in UTC, and translates that value to your local time. See &lt;a href&#x3D;\&quot;https://api.qualtrics.com/api-reference/docs/Instructions/dates-and-times.md\&quot;&gt;Dates and Times&lt;/a&gt; for more information on time zone format. If this parameter is not provided, dates will be exported in UTC/GMT.&lt;/p&gt;
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(@javax.annotation.Nullable String timeZone) {
    this.timeZone = timeZone;
  }


  public ExportCreationRequest useLabels(@javax.annotation.Nullable Boolean useLabels) {
    this.useLabels = useLabels;
    return this;
  }

  /**
   * &lt;p&gt;Instead of exporting the recode (numeric) value for the answer choice, export the text of the answer choice. For more information on recode values, see &lt;a href&#x3D;\&quot;https://www.qualtrics.com/support/survey-platform/survey-module/question-options/recode-values/\&quot;&gt;Recode Values&lt;/a&gt; on the Qualtrics Support Page.&lt;/p&gt;
   * @return useLabels
   */
  @javax.annotation.Nullable
  public Boolean getUseLabels() {
    return useLabels;
  }

  public void setUseLabels(@javax.annotation.Nullable Boolean useLabels) {
    this.useLabels = useLabels;
  }


  public ExportCreationRequest startDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Only export records created after the specified date unless &#x60;sortByLastModifiedDate&#x60; is true. [Dates and Times](../docs/Instructions/dates-and-times.md) for more information on the date and time format. The start date is inclusive.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ExportCreationRequest endDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Only export records created before the specified date unless &#x60;sortByLastModifiedDate&#x60; is true. See [Dates and Times](../docs/Instructions/dates-and-times.md) for more information on the date and time format. The end date is exclusive.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ExportCreationRequest continuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  /**
   * Provide the continuation token returned from a previous export in order to get new responses recorded (or updated, if &#x60;sortByLastModifiedDate&#x60; is set to &#x60;true&#x60;) since that export. Note that a token is only returned if either &#x60;allowContinuation&#x60; or &#x60;continuationToken&#x60; is set. Continuation tokens expire after a week. If you provide a continuation token, it implies &#x60;allowContinuation&#x60; and you must not include the &#x60;allowContinuation&#x60; field.
   * @return continuationToken
   */
  @javax.annotation.Nullable
  public String getContinuationToken() {
    return continuationToken;
  }

  public void setContinuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
  }


  public ExportCreationRequest allowContinuation(@javax.annotation.Nullable Boolean allowContinuation) {
    this.allowContinuation = allowContinuation;
    return this;
  }

  /**
   * Set this to &#x60;true&#x60; to request a continuation token when this export has finished. Note, when this is set to true, you cannot include a filter.
   * @return allowContinuation
   */
  @javax.annotation.Nullable
  public Boolean getAllowContinuation() {
    return allowContinuation;
  }

  public void setAllowContinuation(@javax.annotation.Nullable Boolean allowContinuation) {
    this.allowContinuation = allowContinuation;
  }


  public ExportCreationRequest sortByLastModifiedDate(@javax.annotation.Nullable Boolean sortByLastModifiedDate) {
    this.sortByLastModifiedDate = sortByLastModifiedDate;
    return this;
  }

  /**
   * Sort responses by modified date, which represents the date when a response was last updated or the creation time if the response hasn&#39;t changed since it was recorded. Note, when this is set to &#x60;true&#x60;, &#x60;startDate&#x60; and/or &#x60;endDate&#x60;, if provided, will be used to filter responses based on the modified date instead of the creation time alone. This parameter cannot be used together with the &#x60;filterId&#x60; parameter. Also, the modified date will be automatically included under an additional &#x60;LastModifiedDate&#x60; column in the export. &#x60;sortByLastModifiedDate&#x60; can be used in conjunction with &#x60;continuationToken&#x60; to periodically get all the new and modified responses since the last export and is the recommended way of handling that use case.
   * @return sortByLastModifiedDate
   */
  @javax.annotation.Nullable
  public Boolean getSortByLastModifiedDate() {
    return sortByLastModifiedDate;
  }

  public void setSortByLastModifiedDate(@javax.annotation.Nullable Boolean sortByLastModifiedDate) {
    this.sortByLastModifiedDate = sortByLastModifiedDate;
  }


  public ExportCreationRequest fields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
    return this;
  }

  public ExportCreationRequest addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * List of field names to be exported. If provided, only fields from the provided list will be exported
   * @return fields
   */
  @javax.annotation.Nullable
  public List<String> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportCreationRequest exportCreationRequest = (ExportCreationRequest) o;
    return Objects.equals(this.format, exportCreationRequest.format) &&
        Objects.equals(this.compress, exportCreationRequest.compress) &&
        Objects.equals(this.formatDecimalAsComma, exportCreationRequest.formatDecimalAsComma) &&
        Objects.equals(this.limit, exportCreationRequest.limit) &&
        Objects.equals(this.newlineReplacement, exportCreationRequest.newlineReplacement) &&
        Objects.equals(this.timeZone, exportCreationRequest.timeZone) &&
        Objects.equals(this.useLabels, exportCreationRequest.useLabels) &&
        Objects.equals(this.startDate, exportCreationRequest.startDate) &&
        Objects.equals(this.endDate, exportCreationRequest.endDate) &&
        Objects.equals(this.continuationToken, exportCreationRequest.continuationToken) &&
        Objects.equals(this.allowContinuation, exportCreationRequest.allowContinuation) &&
        Objects.equals(this.sortByLastModifiedDate, exportCreationRequest.sortByLastModifiedDate) &&
        Objects.equals(this.fields, exportCreationRequest.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, compress, formatDecimalAsComma, limit, newlineReplacement, timeZone, useLabels, startDate, endDate, continuationToken, allowContinuation, sortByLastModifiedDate, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportCreationRequest {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    formatDecimalAsComma: ").append(toIndentedString(formatDecimalAsComma)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    newlineReplacement: ").append(toIndentedString(newlineReplacement)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    useLabels: ").append(toIndentedString(useLabels)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("    allowContinuation: ").append(toIndentedString(allowContinuation)).append("\n");
    sb.append("    sortByLastModifiedDate: ").append(toIndentedString(sortByLastModifiedDate)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("compress");
    openapiFields.add("formatDecimalAsComma");
    openapiFields.add("limit");
    openapiFields.add("newlineReplacement");
    openapiFields.add("timeZone");
    openapiFields.add("useLabels");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("continuationToken");
    openapiFields.add("allowContinuation");
    openapiFields.add("sortByLastModifiedDate");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportCreationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportCreationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportCreationRequest is not found in the empty JSON string", ExportCreationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportCreationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportCreationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportCreationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      if ((jsonObj.get("newlineReplacement") != null && !jsonObj.get("newlineReplacement").isJsonNull()) && !jsonObj.get("newlineReplacement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newlineReplacement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newlineReplacement").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("continuationToken") != null && !jsonObj.get("continuationToken").isJsonNull()) && !jsonObj.get("continuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continuationToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull() && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportCreationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportCreationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportCreationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportCreationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportCreationRequest>() {
           @Override
           public void write(JsonWriter out, ExportCreationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportCreationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportCreationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportCreationRequest
   * @throws IOException if the JSON string is invalid with respect to ExportCreationRequest
   */
  public static ExportCreationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportCreationRequest.class);
  }

  /**
   * Convert an instance of ExportCreationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

