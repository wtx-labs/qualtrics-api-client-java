/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * IDPField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class IDPField {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  /**
   * The type of values stored in IDP   - &#x60;number&#x60; - Numeric value: A single number, with infinite possible values. In CX dashboards, this is a numeric value field type, and in Stats iQ this is a number variable type.  - &#x60;number-set&#x60; - Number set: A single number from a set of numbers which has a finite set of possible values (e.g., scale from 1 to 5). In CX dashboards, this is the number set field type, and in Stats iQ this is a number variable type.  - &#x60;string&#x60; - Text value: A one or two word value, with infinite possible values. In CX dashboards, this is a text value field type, and in Stats iQ this is a text variable type.  - &#x60;string-set&#x60; - Text set: A one or two word value from a finite set of values (e.g., on a scale from &#x60;very satisfied&#x60; to &#x60;very dissatisfied&#x60;). In CX dashboards, this is a text value field type, and in Stats iQ this is a categories variable type.   - &#x60;open-text&#x60; - Open text: Longer blocks of text. In CX dashboards this is an open text field type, and in Stats iQ this is a text variable type.  - &#x60;date-time&#x60; - Date: A calendar date. In CX dashboards, this is the date field type, and in Stats iQ this is a times variable type. The API will enforce the string to be in the ISO-8601 date-time format.  - &#x60;multi-answer&#x60; - Multi-answer text set: An array of strings that is treated like a multi-answer question.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER("number"),
    
    NUMBER_SET("number-set"),
    
    STRING("string"),
    
    STRING_SET("string-set"),
    
    OPEN_TEXT("open-text"),
    
    DATE_TIME("date-time"),
    
    MULTI_ANSWER("multi-answer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type = TypeEnum.OPEN_TEXT;

  public IDPField() {
  }

  public IDPField name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public IDPField type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of values stored in IDP   - &#x60;number&#x60; - Numeric value: A single number, with infinite possible values. In CX dashboards, this is a numeric value field type, and in Stats iQ this is a number variable type.  - &#x60;number-set&#x60; - Number set: A single number from a set of numbers which has a finite set of possible values (e.g., scale from 1 to 5). In CX dashboards, this is the number set field type, and in Stats iQ this is a number variable type.  - &#x60;string&#x60; - Text value: A one or two word value, with infinite possible values. In CX dashboards, this is a text value field type, and in Stats iQ this is a text variable type.  - &#x60;string-set&#x60; - Text set: A one or two word value from a finite set of values (e.g., on a scale from &#x60;very satisfied&#x60; to &#x60;very dissatisfied&#x60;). In CX dashboards, this is a text value field type, and in Stats iQ this is a categories variable type.   - &#x60;open-text&#x60; - Open text: Longer blocks of text. In CX dashboards this is an open text field type, and in Stats iQ this is a text variable type.  - &#x60;date-time&#x60; - Date: A calendar date. In CX dashboards, this is the date field type, and in Stats iQ this is a times variable type. The API will enforce the string to be in the ISO-8601 date-time format.  - &#x60;multi-answer&#x60; - Multi-answer text set: An array of strings that is treated like a multi-answer question.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDPField idPField = (IDPField) o;
    return Objects.equals(this.name, idPField.name) &&
        Objects.equals(this.type, idPField.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDPField {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IDPField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IDPField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDPField is not found in the empty JSON string", IDPField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IDPField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IDPField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IDPField.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDPField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDPField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDPField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDPField.class));

       return (TypeAdapter<T>) new TypeAdapter<IDPField>() {
           @Override
           public void write(JsonWriter out, IDPField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDPField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IDPField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IDPField
   * @throws IOException if the JSON string is invalid with respect to IDPField
   */
  public static IDPField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDPField.class);
  }

  /**
   * Convert an instance of IDPField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

