/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * Result17
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Result17 {
  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  @javax.annotation.Nullable
  private String contactId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  @javax.annotation.Nullable
  private Long creationDate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  @javax.annotation.Nullable
  private Long lastModified;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  @javax.annotation.Nullable
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  @javax.annotation.Nullable
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_DOMAIN = "emailDomain";
  @SerializedName(SERIALIZED_NAME_EMAIL_DOMAIN)
  @javax.annotation.Nullable
  private String emailDomain;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private String phone;

  public static final String SERIALIZED_NAME_EXT_REF = "extRef";
  @SerializedName(SERIALIZED_NAME_EXT_REF)
  @javax.annotation.Nullable
  private String extRef;

  public static final String SERIALIZED_NAME_EMBEDDED_DATA = "embeddedData";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DATA)
  @javax.annotation.Nullable
  private Map<String, String> embeddedData = new HashMap<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nullable
  private String language;

  public static final String SERIALIZED_NAME_DIRECTORY_UNSUBSCRIBED = "directoryUnsubscribed";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_UNSUBSCRIBED)
  @javax.annotation.Nullable
  private Boolean directoryUnsubscribed;

  public static final String SERIALIZED_NAME_DIRECTORY_UNSUBSCRIBE_DATE = "directoryUnsubscribeDate";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_UNSUBSCRIBE_DATE)
  @javax.annotation.Nullable
  private String directoryUnsubscribeDate;

  public static final String SERIALIZED_NAME_MAILING_LIST_UNSUBSCRIBED = "mailingListUnsubscribed";
  @SerializedName(SERIALIZED_NAME_MAILING_LIST_UNSUBSCRIBED)
  @javax.annotation.Nullable
  private Boolean mailingListUnsubscribed;

  public static final String SERIALIZED_NAME_MAILING_LIST_UNSUBSCRIBE_DATE = "mailingListUnsubscribeDate";
  @SerializedName(SERIALIZED_NAME_MAILING_LIST_UNSUBSCRIBE_DATE)
  @javax.annotation.Nullable
  private Long mailingListUnsubscribeDate;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  @javax.annotation.Nullable
  private Map<String, String> stats;

  public static final String SERIALIZED_NAME_CONTACT_LOOKUP_ID = "contactLookupId";
  @SerializedName(SERIALIZED_NAME_CONTACT_LOOKUP_ID)
  @javax.annotation.Nullable
  private String contactLookupId;

  public static final String SERIALIZED_NAME_PRIVATE_EMBEDDED_DATA = "privateEmbeddedData";
  @SerializedName(SERIALIZED_NAME_PRIVATE_EMBEDDED_DATA)
  @javax.annotation.Nullable
  private Map<String, String> privateEmbeddedData = new HashMap<>();

  public Result17() {
  }

  public Result17 contactId(@javax.annotation.Nullable String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * 
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(@javax.annotation.Nullable String contactId) {
    this.contactId = contactId;
  }


  public Result17 creationDate(@javax.annotation.Nullable Long creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date and time this contact&#39;s record was created. Expressed in milliseconds since the Unix epoch, January 1, 1970 at 0:00 UTC.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Long getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(@javax.annotation.Nullable Long creationDate) {
    this.creationDate = creationDate;
  }


  public Result17 lastModified(@javax.annotation.Nullable Long lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Date and time this record was last modified. Expressed in milliseconds since the Unix epoch, January 1, 1970 at 0:00 UTC.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public Long getLastModified() {
    return lastModified;
  }

  public void setLastModified(@javax.annotation.Nullable Long lastModified) {
    this.lastModified = lastModified;
  }


  public Result17 firstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * THe contact&#39;s first name.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(@javax.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public Result17 lastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The contact&#39;s last name.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(@javax.annotation.Nullable String lastName) {
    this.lastName = lastName;
  }


  public Result17 email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * The contact&#39;s email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public Result17 emailDomain(@javax.annotation.Nullable String emailDomain) {
    this.emailDomain = emailDomain;
    return this;
  }

  /**
   * The contact&#39;s email domain.
   * @return emailDomain
   */
  @javax.annotation.Nullable
  public String getEmailDomain() {
    return emailDomain;
  }

  public void setEmailDomain(@javax.annotation.Nullable String emailDomain) {
    this.emailDomain = emailDomain;
  }


  public Result17 phone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The contact&#39;s phone number.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
  }


  public Result17 extRef(@javax.annotation.Nullable String extRef) {
    this.extRef = extRef;
    return this;
  }

  /**
   * External reference information for the contact.
   * @return extRef
   */
  @javax.annotation.Nullable
  public String getExtRef() {
    return extRef;
  }

  public void setExtRef(@javax.annotation.Nullable String extRef) {
    this.extRef = extRef;
  }


  public Result17 embeddedData(@javax.annotation.Nullable Map<String, String> embeddedData) {
    this.embeddedData = embeddedData;
    return this;
  }

  public Result17 putEmbeddedDataItem(String key, String embeddedDataItem) {
    if (this.embeddedData == null) {
      this.embeddedData = new HashMap<>();
    }
    this.embeddedData.put(key, embeddedDataItem);
    return this;
  }

  /**
   * Embedded data for the contact.
   * @return embeddedData
   */
  @javax.annotation.Nullable
  public Map<String, String> getEmbeddedData() {
    return embeddedData;
  }

  public void setEmbeddedData(@javax.annotation.Nullable Map<String, String> embeddedData) {
    this.embeddedData = embeddedData;
  }


  public Result17 language(@javax.annotation.Nullable String language) {
    this.language = language;
    return this;
  }

  /**
   * The contact&#39;s preferred language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nullable String language) {
    this.language = language;
  }


  public Result17 directoryUnsubscribed(@javax.annotation.Nullable Boolean directoryUnsubscribed) {
    this.directoryUnsubscribed = directoryUnsubscribed;
    return this;
  }

  /**
   * Indicates whether the user opted out of the directory.
   * @return directoryUnsubscribed
   */
  @javax.annotation.Nullable
  public Boolean getDirectoryUnsubscribed() {
    return directoryUnsubscribed;
  }

  public void setDirectoryUnsubscribed(@javax.annotation.Nullable Boolean directoryUnsubscribed) {
    this.directoryUnsubscribed = directoryUnsubscribed;
  }


  public Result17 directoryUnsubscribeDate(@javax.annotation.Nullable String directoryUnsubscribeDate) {
    this.directoryUnsubscribeDate = directoryUnsubscribeDate;
    return this;
  }

  /**
   * Date and time the user opted out of the directory. Expressed in ISO 8601 format
   * @return directoryUnsubscribeDate
   */
  @javax.annotation.Nullable
  public String getDirectoryUnsubscribeDate() {
    return directoryUnsubscribeDate;
  }

  public void setDirectoryUnsubscribeDate(@javax.annotation.Nullable String directoryUnsubscribeDate) {
    this.directoryUnsubscribeDate = directoryUnsubscribeDate;
  }


  public Result17 mailingListUnsubscribed(@javax.annotation.Nullable Boolean mailingListUnsubscribed) {
    this.mailingListUnsubscribed = mailingListUnsubscribed;
    return this;
  }

  /**
   * Indicates whether the contact unsubscribed from this mailing list. 
   * @return mailingListUnsubscribed
   */
  @javax.annotation.Nullable
  public Boolean getMailingListUnsubscribed() {
    return mailingListUnsubscribed;
  }

  public void setMailingListUnsubscribed(@javax.annotation.Nullable Boolean mailingListUnsubscribed) {
    this.mailingListUnsubscribed = mailingListUnsubscribed;
  }


  public Result17 mailingListUnsubscribeDate(@javax.annotation.Nullable Long mailingListUnsubscribeDate) {
    this.mailingListUnsubscribeDate = mailingListUnsubscribeDate;
    return this;
  }

  /**
   * The date the contact opted out of this mailing list. Is set to null if the user has not opted out.
   * @return mailingListUnsubscribeDate
   */
  @javax.annotation.Nullable
  public Long getMailingListUnsubscribeDate() {
    return mailingListUnsubscribeDate;
  }

  public void setMailingListUnsubscribeDate(@javax.annotation.Nullable Long mailingListUnsubscribeDate) {
    this.mailingListUnsubscribeDate = mailingListUnsubscribeDate;
  }


  public Result17 stats(@javax.annotation.Nullable Map<String, String> stats) {
    this.stats = stats;
    return this;
  }

  public Result17 putStatsItem(String key, String statsItem) {
    if (this.stats == null) {
      this.stats = new HashMap<>();
    }
    this.stats.put(key, statsItem);
    return this;
  }

  /**
   * Statistics relevant to the request. All Month Stats are deprecated and no longer updated.
   * @return stats
   */
  @javax.annotation.Nullable
  public Map<String, String> getStats() {
    return stats;
  }

  public void setStats(@javax.annotation.Nullable Map<String, String> stats) {
    this.stats = stats;
  }


  public Result17 contactLookupId(@javax.annotation.Nullable String contactLookupId) {
    this.contactLookupId = contactLookupId;
    return this;
  }

  /**
   * The contact&#39;s unique ID in the mailing list.
   * @return contactLookupId
   */
  @javax.annotation.Nullable
  public String getContactLookupId() {
    return contactLookupId;
  }

  public void setContactLookupId(@javax.annotation.Nullable String contactLookupId) {
    this.contactLookupId = contactLookupId;
  }


  public Result17 privateEmbeddedData(@javax.annotation.Nullable Map<String, String> privateEmbeddedData) {
    this.privateEmbeddedData = privateEmbeddedData;
    return this;
  }

  public Result17 putPrivateEmbeddedDataItem(String key, String privateEmbeddedDataItem) {
    if (this.privateEmbeddedData == null) {
      this.privateEmbeddedData = new HashMap<>();
    }
    this.privateEmbeddedData.put(key, privateEmbeddedDataItem);
    return this;
  }

  /**
   * Embedded data for the contact.
   * @return privateEmbeddedData
   */
  @javax.annotation.Nullable
  public Map<String, String> getPrivateEmbeddedData() {
    return privateEmbeddedData;
  }

  public void setPrivateEmbeddedData(@javax.annotation.Nullable Map<String, String> privateEmbeddedData) {
    this.privateEmbeddedData = privateEmbeddedData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Result17 result17 = (Result17) o;
    return Objects.equals(this.contactId, result17.contactId) &&
        Objects.equals(this.creationDate, result17.creationDate) &&
        Objects.equals(this.lastModified, result17.lastModified) &&
        Objects.equals(this.firstName, result17.firstName) &&
        Objects.equals(this.lastName, result17.lastName) &&
        Objects.equals(this.email, result17.email) &&
        Objects.equals(this.emailDomain, result17.emailDomain) &&
        Objects.equals(this.phone, result17.phone) &&
        Objects.equals(this.extRef, result17.extRef) &&
        Objects.equals(this.embeddedData, result17.embeddedData) &&
        Objects.equals(this.language, result17.language) &&
        Objects.equals(this.directoryUnsubscribed, result17.directoryUnsubscribed) &&
        Objects.equals(this.directoryUnsubscribeDate, result17.directoryUnsubscribeDate) &&
        Objects.equals(this.mailingListUnsubscribed, result17.mailingListUnsubscribed) &&
        Objects.equals(this.mailingListUnsubscribeDate, result17.mailingListUnsubscribeDate) &&
        Objects.equals(this.stats, result17.stats) &&
        Objects.equals(this.contactLookupId, result17.contactLookupId) &&
        Objects.equals(this.privateEmbeddedData, result17.privateEmbeddedData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, creationDate, lastModified, firstName, lastName, email, emailDomain, phone, extRef, embeddedData, language, directoryUnsubscribed, directoryUnsubscribeDate, mailingListUnsubscribed, mailingListUnsubscribeDate, stats, contactLookupId, privateEmbeddedData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Result17 {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailDomain: ").append(toIndentedString(emailDomain)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    extRef: ").append(toIndentedString(extRef)).append("\n");
    sb.append("    embeddedData: ").append(toIndentedString(embeddedData)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    directoryUnsubscribed: ").append(toIndentedString(directoryUnsubscribed)).append("\n");
    sb.append("    directoryUnsubscribeDate: ").append(toIndentedString(directoryUnsubscribeDate)).append("\n");
    sb.append("    mailingListUnsubscribed: ").append(toIndentedString(mailingListUnsubscribed)).append("\n");
    sb.append("    mailingListUnsubscribeDate: ").append(toIndentedString(mailingListUnsubscribeDate)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    contactLookupId: ").append(toIndentedString(contactLookupId)).append("\n");
    sb.append("    privateEmbeddedData: ").append(toIndentedString(privateEmbeddedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactId");
    openapiFields.add("creationDate");
    openapiFields.add("lastModified");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("emailDomain");
    openapiFields.add("phone");
    openapiFields.add("extRef");
    openapiFields.add("embeddedData");
    openapiFields.add("language");
    openapiFields.add("directoryUnsubscribed");
    openapiFields.add("directoryUnsubscribeDate");
    openapiFields.add("mailingListUnsubscribed");
    openapiFields.add("mailingListUnsubscribeDate");
    openapiFields.add("stats");
    openapiFields.add("contactLookupId");
    openapiFields.add("privateEmbeddedData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Result17
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Result17.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Result17 is not found in the empty JSON string", Result17.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Result17.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Result17` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactId") != null && !jsonObj.get("contactId").isJsonNull()) && !jsonObj.get("contactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("emailDomain") != null && !jsonObj.get("emailDomain").isJsonNull()) && !jsonObj.get("emailDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailDomain").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("extRef") != null && !jsonObj.get("extRef").isJsonNull()) && !jsonObj.get("extRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extRef").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("directoryUnsubscribeDate") != null && !jsonObj.get("directoryUnsubscribeDate").isJsonNull()) && !jsonObj.get("directoryUnsubscribeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryUnsubscribeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryUnsubscribeDate").toString()));
      }
      if ((jsonObj.get("contactLookupId") != null && !jsonObj.get("contactLookupId").isJsonNull()) && !jsonObj.get("contactLookupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactLookupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactLookupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Result17.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Result17' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Result17> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Result17.class));

       return (TypeAdapter<T>) new TypeAdapter<Result17>() {
           @Override
           public void write(JsonWriter out, Result17 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Result17 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Result17 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Result17
   * @throws IOException if the JSON string is invalid with respect to Result17
   */
  public static Result17 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Result17.class);
  }

  /**
   * Convert an instance of Result17 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

