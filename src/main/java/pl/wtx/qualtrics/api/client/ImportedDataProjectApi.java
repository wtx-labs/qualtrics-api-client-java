/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.CreateIDPRequest;
import pl.wtx.qualtrics.api.client.model.DefaultEmptyResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.ExportCreationRequest;
import pl.wtx.qualtrics.api.client.model.ExportCreationResponse;
import pl.wtx.qualtrics.api.client.model.ExportStatusResponse;
import java.io.File;
import pl.wtx.qualtrics.api.client.model.IDPNotFound;
import pl.wtx.qualtrics.api.client.model.IDPResponse;
import pl.wtx.qualtrics.api.client.model.UpdateIDPRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportedDataProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportedDataProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportedDataProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createExport
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param exportCreationRequest This is a body with many optional parameters. The simplest possible call just includes the file format for the export. The rest of the optional fields modify the export in a variety of useful ways.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful export creation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable ExportCreationRequest exportCreationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportCreationRequest;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/exports"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExportValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable ExportCreationRequest exportCreationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling createExport(Async)");
        }

        return createExportCall(idpSourceId, exportCreationRequest, _callback);

    }

    /**
     * Starts an IDP export.
     * Starts an export of an IDP&#39;s records.   This page will provide additional details and things you should know about this endpoint.   &lt;!-- theme: warning --&gt; &gt;### Max File Size &gt;Currently, exports exceeding 1.8 GB will fail. To prevent your export from failing, use proper limits and filters to limit the size of your final export file.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param exportCreationRequest This is a body with many optional parameters. The simplest possible call just includes the file format for the export. The rest of the optional fields modify the export in a variety of useful ways.  (optional)
     * @return ExportCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful export creation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportCreationResponse createExport(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable ExportCreationRequest exportCreationRequest) throws ApiException {
        ApiResponse<ExportCreationResponse> localVarResp = createExportWithHttpInfo(idpSourceId, exportCreationRequest);
        return localVarResp.getData();
    }

    /**
     * Starts an IDP export.
     * Starts an export of an IDP&#39;s records.   This page will provide additional details and things you should know about this endpoint.   &lt;!-- theme: warning --&gt; &gt;### Max File Size &gt;Currently, exports exceeding 1.8 GB will fail. To prevent your export from failing, use proper limits and filters to limit the size of your final export file.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param exportCreationRequest This is a body with many optional parameters. The simplest possible call just includes the file format for the export. The rest of the optional fields modify the export in a variety of useful ways.  (optional)
     * @return ApiResponse&lt;ExportCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful export creation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportCreationResponse> createExportWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable ExportCreationRequest exportCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createExportValidateBeforeCall(idpSourceId, exportCreationRequest, null);
        Type localVarReturnType = new TypeToken<ExportCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts an IDP export. (asynchronously)
     * Starts an export of an IDP&#39;s records.   This page will provide additional details and things you should know about this endpoint.   &lt;!-- theme: warning --&gt; &gt;### Max File Size &gt;Currently, exports exceeding 1.8 GB will fail. To prevent your export from failing, use proper limits and filters to limit the size of your final export file.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param exportCreationRequest This is a body with many optional parameters. The simplest possible call just includes the file format for the export. The rest of the optional fields modify the export in a variety of useful ways.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful export creation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable ExportCreationRequest exportCreationRequest, final ApiCallback<ExportCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExportValidateBeforeCall(idpSourceId, exportCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportFile
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param fileId The ID given to you after running your Export Progress call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested data in binary form. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;fileId&#x60; or a &#39;null&#39; value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportFileCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/exports/{fileId}/file"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportFileValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling getExportFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getExportFile(Async)");
        }

        return getExportFileCall(idpSourceId, fileId, _callback);

    }

    /**
     * Get Export File
     * Retrieves the export file after the file export process completes. By default, the export file is returned as a ZIP file, but you can also request the export file in a different file format when you start the export with the file format you specified in [Start Export](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports/post) call. The supported formats for the export file are csv, tsv, spss, or excel.   The compressed file inside the retrieved ZIP file has this naming convention: {Imported Data Project Name}.{Export Format}. Note that the file does not return time and date of export. For date and time information, you need to record this information manually during the export process.  The example below shows a sample cURL request for this endpoint. Please note that you need to include your &#x60;idpSourceId&#x60; and the &#x60;fileId&#x60; in the URL of this request. The &#x60;fileId&#x60; is returned in the response to the [Get IDP Export Progress](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports~1{jobId}) call.  &lt;!-- title: Retrieve file --&gt; &#x60;&#x60;&#x60;shell curl --request GET \\ --url https://ca1.qualtrics.com/API/v3/imported-data-projects/idpSourceId/exports/fileId/file \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;X-API-TOKEN: &#39; \\ -OJ myResponseFile &#x60;&#x60;&#x60;  &lt;!-- theme: warning --&gt; ### Try it Feature Limitation &gt;The &#39;Try it&#39; tab above does not allow data export. Please use cURL or the Postman app to send this request.  &lt;!-- theme: info --&gt;  ### File Expiration  Export files expire one week after the completion of an export. After that expiration, the file is no longer available, and you will have to start the export request again.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param fileId The ID given to you after running your Export Progress call. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested data in binary form. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;fileId&#x60; or a &#39;null&#39; value. </td><td>  -  </td></tr>
     </table>
     */
    public File getExportFile(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String fileId) throws ApiException {
        ApiResponse<File> localVarResp = getExportFileWithHttpInfo(idpSourceId, fileId);
        return localVarResp.getData();
    }

    /**
     * Get Export File
     * Retrieves the export file after the file export process completes. By default, the export file is returned as a ZIP file, but you can also request the export file in a different file format when you start the export with the file format you specified in [Start Export](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports/post) call. The supported formats for the export file are csv, tsv, spss, or excel.   The compressed file inside the retrieved ZIP file has this naming convention: {Imported Data Project Name}.{Export Format}. Note that the file does not return time and date of export. For date and time information, you need to record this information manually during the export process.  The example below shows a sample cURL request for this endpoint. Please note that you need to include your &#x60;idpSourceId&#x60; and the &#x60;fileId&#x60; in the URL of this request. The &#x60;fileId&#x60; is returned in the response to the [Get IDP Export Progress](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports~1{jobId}) call.  &lt;!-- title: Retrieve file --&gt; &#x60;&#x60;&#x60;shell curl --request GET \\ --url https://ca1.qualtrics.com/API/v3/imported-data-projects/idpSourceId/exports/fileId/file \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;X-API-TOKEN: &#39; \\ -OJ myResponseFile &#x60;&#x60;&#x60;  &lt;!-- theme: warning --&gt; ### Try it Feature Limitation &gt;The &#39;Try it&#39; tab above does not allow data export. Please use cURL or the Postman app to send this request.  &lt;!-- theme: info --&gt;  ### File Expiration  Export files expire one week after the completion of an export. After that expiration, the file is no longer available, and you will have to start the export request again.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param fileId The ID given to you after running your Export Progress call. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested data in binary form. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;fileId&#x60; or a &#39;null&#39; value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getExportFileWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String fileId) throws ApiException {
        okhttp3.Call localVarCall = getExportFileValidateBeforeCall(idpSourceId, fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export File (asynchronously)
     * Retrieves the export file after the file export process completes. By default, the export file is returned as a ZIP file, but you can also request the export file in a different file format when you start the export with the file format you specified in [Start Export](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports/post) call. The supported formats for the export file are csv, tsv, spss, or excel.   The compressed file inside the retrieved ZIP file has this naming convention: {Imported Data Project Name}.{Export Format}. Note that the file does not return time and date of export. For date and time information, you need to record this information manually during the export process.  The example below shows a sample cURL request for this endpoint. Please note that you need to include your &#x60;idpSourceId&#x60; and the &#x60;fileId&#x60; in the URL of this request. The &#x60;fileId&#x60; is returned in the response to the [Get IDP Export Progress](./importedDataProject.json/paths/~1imported-data-project~1{idpSourceId}~1exports~1{jobId}) call.  &lt;!-- title: Retrieve file --&gt; &#x60;&#x60;&#x60;shell curl --request GET \\ --url https://ca1.qualtrics.com/API/v3/imported-data-projects/idpSourceId/exports/fileId/file \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;X-API-TOKEN: &#39; \\ -OJ myResponseFile &#x60;&#x60;&#x60;  &lt;!-- theme: warning --&gt; ### Try it Feature Limitation &gt;The &#39;Try it&#39; tab above does not allow data export. Please use cURL or the Postman app to send this request.  &lt;!-- theme: info --&gt;  ### File Expiration  Export files expire one week after the completion of an export. After that expiration, the file is no longer available, and you will have to start the export request again.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param fileId The ID given to you after running your Export Progress call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested data in binary form. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;fileId&#x60; or a &#39;null&#39; value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportFileAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportFileValidateBeforeCall(idpSourceId, fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportProgress
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param jobId Export jobId returned by the start export call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;jobId&#x60; or a &#39;null&#39; value.  If you pass in an empty string jobId, you will receive the &#39;resource does not exist&#39; result.   </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportProgressCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/exports/{jobId}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportProgressValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling getExportProgress(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getExportProgress(Async)");
        }

        return getExportProgressCall(idpSourceId, jobId, _callback);

    }

    /**
     * Get Export Progress
     * Retrieves the status of a export for the given &#x60;jobId&#x60;. Please note you will find the &#x60;jobId&#x60; in the Export POST response in the &#x60;jobId&#x60; field.   If you receive a status of &#x60;failed&#x60;, record your &#x60;requestId&#x60; and try your export again. Contact support with your &#x60;requestId&#x60; and date and time of the call to troubleshoot.   &lt;!-- theme: danger --&gt; &gt; ### Before calling this API, make sure your &#x60;jobId&#x60; is not null. &gt; You could end up in an infinite loop if you don&#39;t code this properly. Please check for null before making this call. Also check for a 404 response and stop polling if you receive one.   &lt;!-- theme: info --&gt; &gt;### &#x60;percentComplete&#x60; Field &gt;Please note the percentComplete field is a convenience field. You cannot download the file until the \&quot;status\&quot; field indicates &#x60;complete&#x60; - which is also when you&#39;ll receive a fileid.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param jobId Export jobId returned by the start export call. (required)
     * @return ExportStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;jobId&#x60; or a &#39;null&#39; value.  If you pass in an empty string jobId, you will receive the &#39;resource does not exist&#39; result.   </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatusResponse getExportProgress(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<ExportStatusResponse> localVarResp = getExportProgressWithHttpInfo(idpSourceId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Export Progress
     * Retrieves the status of a export for the given &#x60;jobId&#x60;. Please note you will find the &#x60;jobId&#x60; in the Export POST response in the &#x60;jobId&#x60; field.   If you receive a status of &#x60;failed&#x60;, record your &#x60;requestId&#x60; and try your export again. Contact support with your &#x60;requestId&#x60; and date and time of the call to troubleshoot.   &lt;!-- theme: danger --&gt; &gt; ### Before calling this API, make sure your &#x60;jobId&#x60; is not null. &gt; You could end up in an infinite loop if you don&#39;t code this properly. Please check for null before making this call. Also check for a 404 response and stop polling if you receive one.   &lt;!-- theme: info --&gt; &gt;### &#x60;percentComplete&#x60; Field &gt;Please note the percentComplete field is a convenience field. You cannot download the file until the \&quot;status\&quot; field indicates &#x60;complete&#x60; - which is also when you&#39;ll receive a fileid.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param jobId Export jobId returned by the start export call. (required)
     * @return ApiResponse&lt;ExportStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;jobId&#x60; or a &#39;null&#39; value.  If you pass in an empty string jobId, you will receive the &#39;resource does not exist&#39; result.   </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatusResponse> getExportProgressWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getExportProgressValidateBeforeCall(idpSourceId, jobId, null);
        Type localVarReturnType = new TypeToken<ExportStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export Progress (asynchronously)
     * Retrieves the status of a export for the given &#x60;jobId&#x60;. Please note you will find the &#x60;jobId&#x60; in the Export POST response in the &#x60;jobId&#x60; field.   If you receive a status of &#x60;failed&#x60;, record your &#x60;requestId&#x60; and try your export again. Contact support with your &#x60;requestId&#x60; and date and time of the call to troubleshoot.   &lt;!-- theme: danger --&gt; &gt; ### Before calling this API, make sure your &#x60;jobId&#x60; is not null. &gt; You could end up in an infinite loop if you don&#39;t code this properly. Please check for null before making this call. Also check for a 404 response and stop polling if you receive one.   &lt;!-- theme: info --&gt; &gt;### &#x60;percentComplete&#x60; Field &gt;Please note the percentComplete field is a convenience field. You cannot download the file until the \&quot;status\&quot; field indicates &#x60;complete&#x60; - which is also when you&#39;ll receive a fileid.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param jobId Export jobId returned by the start export call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You will get the \&quot;export not found\&quot; result if you pass in a bad &#x60;jobId&#x60; or a &#39;null&#39; value.  If you pass in an empty string jobId, you will receive the &#39;resource does not exist&#39; result.   </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportProgressAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String jobId, final ApiCallback<ExportStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportProgressValidateBeforeCall(idpSourceId, jobId, _callback);
        Type localVarReturnType = new TypeToken<ExportStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportedDataProject
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportedDataProjectCall(@javax.annotation.Nonnull String idpSourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportedDataProjectValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling getImportedDataProject(Async)");
        }

        return getImportedDataProjectCall(idpSourceId, _callback);

    }

    /**
     * Get Imported Data Project Schema
     * Retrieve the Imported Data Project schema.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @return IDPResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public IDPResponse getImportedDataProject(@javax.annotation.Nonnull String idpSourceId) throws ApiException {
        ApiResponse<IDPResponse> localVarResp = getImportedDataProjectWithHttpInfo(idpSourceId);
        return localVarResp.getData();
    }

    /**
     * Get Imported Data Project Schema
     * Retrieve the Imported Data Project schema.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @return ApiResponse&lt;IDPResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IDPResponse> getImportedDataProjectWithHttpInfo(@javax.annotation.Nonnull String idpSourceId) throws ApiException {
        okhttp3.Call localVarCall = getImportedDataProjectValidateBeforeCall(idpSourceId, null);
        Type localVarReturnType = new TypeToken<IDPResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Imported Data Project Schema (asynchronously)
     * Retrieve the Imported Data Project schema.  
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportedDataProjectAsync(@javax.annotation.Nonnull String idpSourceId, final ApiCallback<IDPResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportedDataProjectValidateBeforeCall(idpSourceId, _callback);
        Type localVarReturnType = new TypeToken<IDPResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImportedDataProject
     * @param createIDPRequest Describes the Imported Data Project (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportedDataProjectCall(@javax.annotation.Nullable CreateIDPRequest createIDPRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIDPRequest;

        // create path and map variables
        String localVarPath = "/imported-data-projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImportedDataProjectValidateBeforeCall(@javax.annotation.Nullable CreateIDPRequest createIDPRequest, final ApiCallback _callback) throws ApiException {
        return postImportedDataProjectCall(createIDPRequest, _callback);

    }

    /**
     * Create Imported Data Project
     * Create the IDP and return it along with its ID. The &#x60;uniqueField&#x60; is the field in the IDP that is unique for each row. The value of that field is used to get, modify, or delete an individual row.
     * @param createIDPRequest Describes the Imported Data Project (optional)
     * @return IDPResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public IDPResponse postImportedDataProject(@javax.annotation.Nullable CreateIDPRequest createIDPRequest) throws ApiException {
        ApiResponse<IDPResponse> localVarResp = postImportedDataProjectWithHttpInfo(createIDPRequest);
        return localVarResp.getData();
    }

    /**
     * Create Imported Data Project
     * Create the IDP and return it along with its ID. The &#x60;uniqueField&#x60; is the field in the IDP that is unique for each row. The value of that field is used to get, modify, or delete an individual row.
     * @param createIDPRequest Describes the Imported Data Project (optional)
     * @return ApiResponse&lt;IDPResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IDPResponse> postImportedDataProjectWithHttpInfo(@javax.annotation.Nullable CreateIDPRequest createIDPRequest) throws ApiException {
        okhttp3.Call localVarCall = postImportedDataProjectValidateBeforeCall(createIDPRequest, null);
        Type localVarReturnType = new TypeToken<IDPResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Imported Data Project (asynchronously)
     * Create the IDP and return it along with its ID. The &#x60;uniqueField&#x60; is the field in the IDP that is unique for each row. The value of that field is used to get, modify, or delete an individual row.
     * @param createIDPRequest Describes the Imported Data Project (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The schema for the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportedDataProjectAsync(@javax.annotation.Nullable CreateIDPRequest createIDPRequest, final ApiCallback<IDPResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImportedDataProjectValidateBeforeCall(createIDPRequest, _callback);
        Type localVarReturnType = new TypeToken<IDPResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateImportedDataProject
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param updateIDPRequest Contains the fields that will be added to the Imported Data Project. Each field must have a unique name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successfully applied to the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateImportedDataProjectCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable UpdateIDPRequest updateIDPRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIDPRequest;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateImportedDataProjectValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable UpdateIDPRequest updateIDPRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling updateImportedDataProject(Async)");
        }

        return updateImportedDataProjectCall(idpSourceId, updateIDPRequest, _callback);

    }

    /**
     * Add columns to Imported Data Project
     * Adds additional columns to the Imported Data Project. Each field must have a unique name.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param updateIDPRequest Contains the fields that will be added to the Imported Data Project. Each field must have a unique name. (optional)
     * @return DefaultEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successfully applied to the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public DefaultEmptyResponse updateImportedDataProject(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable UpdateIDPRequest updateIDPRequest) throws ApiException {
        ApiResponse<DefaultEmptyResponse> localVarResp = updateImportedDataProjectWithHttpInfo(idpSourceId, updateIDPRequest);
        return localVarResp.getData();
    }

    /**
     * Add columns to Imported Data Project
     * Adds additional columns to the Imported Data Project. Each field must have a unique name.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param updateIDPRequest Contains the fields that will be added to the Imported Data Project. Each field must have a unique name. (optional)
     * @return ApiResponse&lt;DefaultEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successfully applied to the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultEmptyResponse> updateImportedDataProjectWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable UpdateIDPRequest updateIDPRequest) throws ApiException {
        okhttp3.Call localVarCall = updateImportedDataProjectValidateBeforeCall(idpSourceId, updateIDPRequest, null);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add columns to Imported Data Project (asynchronously)
     * Adds additional columns to the Imported Data Project. Each field must have a unique name.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param updateIDPRequest Contains the fields that will be added to the Imported Data Project. Each field must have a unique name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update was successfully applied to the Imported Data Project </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateImportedDataProjectAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable UpdateIDPRequest updateIDPRequest, final ApiCallback<DefaultEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateImportedDataProjectValidateBeforeCall(idpSourceId, updateIDPRequest, _callback);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
