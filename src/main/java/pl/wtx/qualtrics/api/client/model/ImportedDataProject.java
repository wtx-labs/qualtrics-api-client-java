/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.qualtrics.api.client.model.IDPField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.qualtrics.api.client.invoker.JSON;

/**
 * ImportedDataProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ImportedDataProject {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_UNIQUE_FIELD = "uniqueField";
  @SerializedName(SERIALIZED_NAME_UNIQUE_FIELD)
  @javax.annotation.Nullable
  private String uniqueField;

  public static final String SERIALIZED_NAME_IDP_SOURCE_ID = "idpSourceId";
  @SerializedName(SERIALIZED_NAME_IDP_SOURCE_ID)
  @javax.annotation.Nullable
  private String idpSourceId;

  public static final String SERIALIZED_NAME_IDP_TYPE = "idpType";
  @SerializedName(SERIALIZED_NAME_IDP_TYPE)
  @javax.annotation.Nullable
  private String idpType;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private List<IDPField> fields = new ArrayList<>();

  public ImportedDataProject() {
  }

  public ImportedDataProject name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ImportedDataProject uniqueField(@javax.annotation.Nullable String uniqueField) {
    this.uniqueField = uniqueField;
    return this;
  }

  /**
   * The field that has a unique value for each row in the IDP. The value will be the &#x60;uniqueField&#x60; to reference each row.
   * @return uniqueField
   */
  @javax.annotation.Nullable
  public String getUniqueField() {
    return uniqueField;
  }

  public void setUniqueField(@javax.annotation.Nullable String uniqueField) {
    this.uniqueField = uniqueField;
  }


  public ImportedDataProject idpSourceId(@javax.annotation.Nullable String idpSourceId) {
    this.idpSourceId = idpSourceId;
    return this;
  }

  /**
   * [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project.
   * @return idpSourceId
   */
  @javax.annotation.Nullable
  public String getIdpSourceId() {
    return idpSourceId;
  }

  public void setIdpSourceId(@javax.annotation.Nullable String idpSourceId) {
    this.idpSourceId = idpSourceId;
  }


  public ImportedDataProject idpType(@javax.annotation.Nullable String idpType) {
    this.idpType = idpType;
    return this;
  }

  /**
   * Get idpType
   * @return idpType
   */
  @javax.annotation.Nullable
  public String getIdpType() {
    return idpType;
  }

  public void setIdpType(@javax.annotation.Nullable String idpType) {
    this.idpType = idpType;
  }


  public ImportedDataProject fields(@javax.annotation.Nullable List<IDPField> fields) {
    this.fields = fields;
    return this;
  }

  public ImportedDataProject addFieldsItem(IDPField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<IDPField> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable List<IDPField> fields) {
    this.fields = fields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportedDataProject importedDataProject = (ImportedDataProject) o;
    return Objects.equals(this.name, importedDataProject.name) &&
        Objects.equals(this.uniqueField, importedDataProject.uniqueField) &&
        Objects.equals(this.idpSourceId, importedDataProject.idpSourceId) &&
        Objects.equals(this.idpType, importedDataProject.idpType) &&
        Objects.equals(this.fields, importedDataProject.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, uniqueField, idpSourceId, idpType, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportedDataProject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uniqueField: ").append(toIndentedString(uniqueField)).append("\n");
    sb.append("    idpSourceId: ").append(toIndentedString(idpSourceId)).append("\n");
    sb.append("    idpType: ").append(toIndentedString(idpType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("uniqueField");
    openapiFields.add("idpSourceId");
    openapiFields.add("idpType");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportedDataProject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportedDataProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportedDataProject is not found in the empty JSON string", ImportedDataProject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportedDataProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportedDataProject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("uniqueField") != null && !jsonObj.get("uniqueField").isJsonNull()) && !jsonObj.get("uniqueField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueField").toString()));
      }
      if ((jsonObj.get("idpSourceId") != null && !jsonObj.get("idpSourceId").isJsonNull()) && !jsonObj.get("idpSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idpSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idpSourceId").toString()));
      }
      if ((jsonObj.get("idpType") != null && !jsonObj.get("idpType").isJsonNull()) && !jsonObj.get("idpType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idpType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idpType").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            IDPField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportedDataProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportedDataProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportedDataProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportedDataProject.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportedDataProject>() {
           @Override
           public void write(JsonWriter out, ImportedDataProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportedDataProject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportedDataProject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportedDataProject
   * @throws IOException if the JSON string is invalid with respect to ImportedDataProject
   */
  public static ImportedDataProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportedDataProject.class);
  }

  /**
   * Convert an instance of ImportedDataProject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

