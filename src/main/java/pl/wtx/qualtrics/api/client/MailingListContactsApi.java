/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.CreateContactResponse;
import pl.wtx.qualtrics.api.client.model.CreateMailingListContactRequest;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.DeleteContactResponse;
import pl.wtx.qualtrics.api.client.model.GetMailingListContactResponse;
import pl.wtx.qualtrics.api.client.model.ListContactsInContactListResponse;
import java.time.OffsetDateTime;
import pl.wtx.qualtrics.api.client.model.PageOfContacts;
import pl.wtx.qualtrics.api.client.model.UpdateContactResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MailingListContactsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MailingListContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MailingListContactsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMailingListContact
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful create contact results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMailingListContactCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMailingListContactRequest;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/contacts"
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMailingListContactValidateBeforeCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling createMailingListContact(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling createMailingListContact(Async)");
        }

        return createMailingListContactCall(mailingListId, directoryId, createMailingListContactRequest, _callback);

    }

    /**
     * Create Contact In Mailing List
     * Create a contact in a specified mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: info --&gt;  &gt;### Performance and Operational Comments &gt;It is recommended to run only one import at a time.  There is no size limit on the data.  It will not speed up imports to a single mailinglist by sending more than one request as the batches are processed sequentially.   &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### Deduplication &gt;If deduplication is on and a contact exists with the same deduplication criteria then it will modify the original contact&#39;s information. &gt; You can find more information on [the support page for deduplication](https://www.qualtrics.com/support/iq-directory/directory-settings-tab/automatic-deduplication/).   
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @return CreateContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful create contact results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public CreateContactResponse createMailingListContact(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest) throws ApiException {
        ApiResponse<CreateContactResponse> localVarResp = createMailingListContactWithHttpInfo(mailingListId, directoryId, createMailingListContactRequest);
        return localVarResp.getData();
    }

    /**
     * Create Contact In Mailing List
     * Create a contact in a specified mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: info --&gt;  &gt;### Performance and Operational Comments &gt;It is recommended to run only one import at a time.  There is no size limit on the data.  It will not speed up imports to a single mailinglist by sending more than one request as the batches are processed sequentially.   &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### Deduplication &gt;If deduplication is on and a contact exists with the same deduplication criteria then it will modify the original contact&#39;s information. &gt; You can find more information on [the support page for deduplication](https://www.qualtrics.com/support/iq-directory/directory-settings-tab/automatic-deduplication/).   
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @return ApiResponse&lt;CreateContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful create contact results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateContactResponse> createMailingListContactWithHttpInfo(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest) throws ApiException {
        okhttp3.Call localVarCall = createMailingListContactValidateBeforeCall(mailingListId, directoryId, createMailingListContactRequest, null);
        Type localVarReturnType = new TypeToken<CreateContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Contact In Mailing List (asynchronously)
     * Create a contact in a specified mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: info --&gt;  &gt;### Performance and Operational Comments &gt;It is recommended to run only one import at a time.  There is no size limit on the data.  It will not speed up imports to a single mailinglist by sending more than one request as the batches are processed sequentially.   &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### Deduplication &gt;If deduplication is on and a contact exists with the same deduplication criteria then it will modify the original contact&#39;s information. &gt; You can find more information on [the support page for deduplication](https://www.qualtrics.com/support/iq-directory/directory-settings-tab/automatic-deduplication/).   
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful create contact results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMailingListContactAsync(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback<CreateContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMailingListContactValidateBeforeCall(mailingListId, directoryId, createMailingListContactRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMailingListContact
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Delete Contact response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMailingListContactCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()))
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMailingListContactValidateBeforeCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling deleteMailingListContact(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling deleteMailingListContact(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling deleteMailingListContact(Async)");
        }

        return deleteMailingListContactCall(contactId, mailingListId, directoryId, _callback);

    }

    /**
     * Delete Contact In Mailing List
     * Delete a single contact from a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### The contact only gets removed from the mailing list, they will remain in the directory. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return DeleteContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Delete Contact response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteContactResponse deleteMailingListContact(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        ApiResponse<DeleteContactResponse> localVarResp = deleteMailingListContactWithHttpInfo(contactId, mailingListId, directoryId);
        return localVarResp.getData();
    }

    /**
     * Delete Contact In Mailing List
     * Delete a single contact from a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### The contact only gets removed from the mailing list, they will remain in the directory. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return ApiResponse&lt;DeleteContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Delete Contact response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteContactResponse> deleteMailingListContactWithHttpInfo(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, null);
        Type localVarReturnType = new TypeToken<DeleteContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Contact In Mailing List (asynchronously)
     * Delete a single contact from a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;   &lt;!-- theme: warning --&gt;  &gt;### The contact only gets removed from the mailing list, they will remain in the directory. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Delete Contact response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMailingListContactAsync(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback<DeleteContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, _callback);
        Type localVarReturnType = new TypeToken<DeleteContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMailingListContact
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailingListContactCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()))
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailingListContactValidateBeforeCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getMailingListContact(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling getMailingListContact(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getMailingListContact(Async)");
        }

        return getMailingListContactCall(contactId, mailingListId, directoryId, _callback);

    }

    /**
     * Get Contact In Mailing List
     * Retrieve a specified contact within a mailing list.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return GetMailingListContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetMailingListContactResponse getMailingListContact(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        ApiResponse<GetMailingListContactResponse> localVarResp = getMailingListContactWithHttpInfo(contactId, mailingListId, directoryId);
        return localVarResp.getData();
    }

    /**
     * Get Contact In Mailing List
     * Retrieve a specified contact within a mailing list.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @return ApiResponse&lt;GetMailingListContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMailingListContactResponse> getMailingListContactWithHttpInfo(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId) throws ApiException {
        okhttp3.Call localVarCall = getMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, null);
        Type localVarReturnType = new TypeToken<GetMailingListContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Contact In Mailing List (asynchronously)
     * Retrieve a specified contact within a mailing list.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Get Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailingListContactAsync(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, final ApiCallback<GetMailingListContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, _callback);
        Type localVarReturnType = new TypeToken<GetMailingListContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMailingListBouncedContacts
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListBouncedContactsCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/bouncedContacts"
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMailingListBouncedContactsValidateBeforeCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling listMailingListBouncedContacts(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling listMailingListBouncedContacts(Async)");
        }

        return listMailingListBouncedContactsCall(mailingListId, directoryId, since, pageSize, skipToken, _callback);

    }

    /**
     * List Bounced Contacts In Mailing List
     * Return a list of contacts in a mailing list who have had an email bounce.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @return PageOfContacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public PageOfContacts listMailingListBouncedContacts(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken) throws ApiException {
        ApiResponse<PageOfContacts> localVarResp = listMailingListBouncedContactsWithHttpInfo(mailingListId, directoryId, since, pageSize, skipToken);
        return localVarResp.getData();
    }

    /**
     * List Bounced Contacts In Mailing List
     * Return a list of contacts in a mailing list who have had an email bounce.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @return ApiResponse&lt;PageOfContacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfContacts> listMailingListBouncedContactsWithHttpInfo(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken) throws ApiException {
        okhttp3.Call localVarCall = listMailingListBouncedContactsValidateBeforeCall(mailingListId, directoryId, since, pageSize, skipToken, null);
        Type localVarReturnType = new TypeToken<PageOfContacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bounced Contacts In Mailing List (asynchronously)
     * Return a list of contacts in a mailing list who have had an email bounce.  &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListBouncedContactsAsync(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, final ApiCallback<PageOfContacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMailingListBouncedContactsValidateBeforeCall(mailingListId, directoryId, since, pageSize, skipToken, _callback);
        Type localVarReturnType = new TypeToken<PageOfContacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMailingListContacts
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 50)
     * @param skipToken The start position for pagination. (optional)
     * @param includeEmbedded Whether &#x60;embeddedData&#x60; is returned in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListContactsCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Boolean includeEmbedded, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/contacts"
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if (includeEmbedded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEmbedded", includeEmbedded));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMailingListContactsValidateBeforeCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Boolean includeEmbedded, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling listMailingListContacts(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling listMailingListContacts(Async)");
        }

        return listMailingListContactsCall(mailingListId, directoryId, pageSize, skipToken, includeEmbedded, _callback);

    }

    /**
     * List Contacts In Mailing List
     * Return a list of contacts in a specified mailing list. &lt;!--From Readme--&gt; For the last page of results, the value associated with &#x60;nextPage&#x60; will be &#x60;null&#x60;. &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  &lt;!-- theme: warning --&gt;  &gt;### The maximum value for &#x60;pageSize&#x60; is 50. &gt; The new string-based pagination functionality results in improved performance and a lower rate of timeouts. To opt in, append query parameter &#x60;useNewPaginationScheme&#x3D;true&#x60;. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 50)
     * @param skipToken The start position for pagination. (optional)
     * @param includeEmbedded Whether &#x60;embeddedData&#x60; is returned in the response. (optional)
     * @return ListContactsInContactListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListContactsInContactListResponse listMailingListContacts(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Boolean includeEmbedded) throws ApiException {
        ApiResponse<ListContactsInContactListResponse> localVarResp = listMailingListContactsWithHttpInfo(mailingListId, directoryId, pageSize, skipToken, includeEmbedded);
        return localVarResp.getData();
    }

    /**
     * List Contacts In Mailing List
     * Return a list of contacts in a specified mailing list. &lt;!--From Readme--&gt; For the last page of results, the value associated with &#x60;nextPage&#x60; will be &#x60;null&#x60;. &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  &lt;!-- theme: warning --&gt;  &gt;### The maximum value for &#x60;pageSize&#x60; is 50. &gt; The new string-based pagination functionality results in improved performance and a lower rate of timeouts. To opt in, append query parameter &#x60;useNewPaginationScheme&#x3D;true&#x60;. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 50)
     * @param skipToken The start position for pagination. (optional)
     * @param includeEmbedded Whether &#x60;embeddedData&#x60; is returned in the response. (optional)
     * @return ApiResponse&lt;ListContactsInContactListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListContactsInContactListResponse> listMailingListContactsWithHttpInfo(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Boolean includeEmbedded) throws ApiException {
        okhttp3.Call localVarCall = listMailingListContactsValidateBeforeCall(mailingListId, directoryId, pageSize, skipToken, includeEmbedded, null);
        Type localVarReturnType = new TypeToken<ListContactsInContactListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Contacts In Mailing List (asynchronously)
     * Return a list of contacts in a specified mailing list. &lt;!--From Readme--&gt; For the last page of results, the value associated with &#x60;nextPage&#x60; will be &#x60;null&#x60;. &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  &lt;!-- theme: warning --&gt;  &gt;### The maximum value for &#x60;pageSize&#x60; is 50. &gt; The new string-based pagination functionality results in improved performance and a lower rate of timeouts. To opt in, append query parameter &#x60;useNewPaginationScheme&#x3D;true&#x60;. 
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 50)
     * @param skipToken The start position for pagination. (optional)
     * @param includeEmbedded Whether &#x60;embeddedData&#x60; is returned in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListContactsAsync(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Boolean includeEmbedded, final ApiCallback<ListContactsInContactListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMailingListContactsValidateBeforeCall(mailingListId, directoryId, pageSize, skipToken, includeEmbedded, _callback);
        Type localVarReturnType = new TypeToken<ListContactsInContactListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMailingListOptedOutContacts
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListOptedOutContactsCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/optedOutContacts"
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMailingListOptedOutContactsValidateBeforeCall(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling listMailingListOptedOutContacts(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling listMailingListOptedOutContacts(Async)");
        }

        return listMailingListOptedOutContactsCall(mailingListId, directoryId, pageSize, skipToken, since, _callback);

    }

    /**
     * List Opted-Out Contacts In Mailing List
     * Return a list of contacts in a mailing list who have opted out.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @return PageOfContacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public PageOfContacts listMailingListOptedOutContacts(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable OffsetDateTime since) throws ApiException {
        ApiResponse<PageOfContacts> localVarResp = listMailingListOptedOutContactsWithHttpInfo(mailingListId, directoryId, pageSize, skipToken, since);
        return localVarResp.getData();
    }

    /**
     * List Opted-Out Contacts In Mailing List
     * Return a list of contacts in a mailing list who have opted out.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @return ApiResponse&lt;PageOfContacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageOfContacts> listMailingListOptedOutContactsWithHttpInfo(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable OffsetDateTime since) throws ApiException {
        okhttp3.Call localVarCall = listMailingListOptedOutContactsValidateBeforeCall(mailingListId, directoryId, pageSize, skipToken, since, null);
        Type localVarReturnType = new TypeToken<PageOfContacts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Opted-Out Contacts In Mailing List (asynchronously)
     * Return a list of contacts in a mailing list who have opted out.
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param pageSize The maximum number of items to return per request (optional, default to 100)
     * @param skipToken The start position for pagination. (optional)
     * @param since The bounced date of the email from which to begin searching for opted-out contacts in the mailing list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of contacts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMailingListOptedOutContactsAsync(@javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback<PageOfContacts> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMailingListOptedOutContactsValidateBeforeCall(mailingListId, directoryId, pageSize, skipToken, since, _callback);
        Type localVarReturnType = new TypeToken<PageOfContacts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMailingListContact
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Update Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailingListContactCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMailingListContactRequest;

        // create path and map variables
        String localVarPath = "/directories/{directoryId}/mailinglists/{mailingListId}/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()))
            .replace("{" + "mailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()))
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMailingListContactValidateBeforeCall(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling updateMailingListContact(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling updateMailingListContact(Async)");
        }

        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling updateMailingListContact(Async)");
        }

        return updateMailingListContactCall(contactId, mailingListId, directoryId, createMailingListContactRequest, _callback);

    }

    /**
     * Update Contact In Mailing List
     * Update a single contact in a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @return UpdateContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Update Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContactResponse updateMailingListContact(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest) throws ApiException {
        ApiResponse<UpdateContactResponse> localVarResp = updateMailingListContactWithHttpInfo(contactId, mailingListId, directoryId, createMailingListContactRequest);
        return localVarResp.getData();
    }

    /**
     * Update Contact In Mailing List
     * Update a single contact in a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @return ApiResponse&lt;UpdateContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Update Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateContactResponse> updateMailingListContactWithHttpInfo(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, createMailingListContactRequest, null);
        Type localVarReturnType = new TypeToken<UpdateContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Contact In Mailing List (asynchronously)
     * Update a single contact in a mailing list. &lt;!--From Readme--&gt; &lt;!-- theme: warning --&gt;  &gt;### This API call is only available to XM Directory users. &gt;  
     * @param contactId The ID for the desired contact. (required)
     * @param mailingListId The ID for the desired mailing list. (required)
     * @param directoryId The directory ID, also known as a pool ID. (required)
     * @param createMailingListContactRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Update Contact response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid arguments response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMailingListContactAsync(@javax.annotation.Nonnull String contactId, @javax.annotation.Nonnull String mailingListId, @javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable CreateMailingListContactRequest createMailingListContactRequest, final ApiCallback<UpdateContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMailingListContactValidateBeforeCall(contactId, mailingListId, directoryId, createMailingListContactRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
