/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.BatchGetParticipantResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import java.io.File;
import pl.wtx.qualtrics.api.client.model.JobId;
import pl.wtx.qualtrics.api.client.model.JobInfo;
import pl.wtx.qualtrics.api.client.model.JobResult;
import pl.wtx.qualtrics.api.client.model.MetadataFilter;
import pl.wtx.qualtrics.api.client.model.ParticipantImportBody;
import pl.wtx.qualtrics.api.client.model.ParticipantResponse;
import pl.wtx.qualtrics.api.client.model.ParticipantsSearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExApiDirectoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExApiDirectoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExApiDirectoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteParticipantsInDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantsInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/delete-participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteParticipantsInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling deleteParticipantsInDirectory(Async)");
        }

        return deleteParticipantsInDirectoryCall(directoryId, requestBody, _callback);

    }

    /**
     * Delete Participants
     * Start participants deletion, from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt;  &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId deleteParticipantsInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        ApiResponse<JobId> localVarResp = deleteParticipantsInDirectoryWithHttpInfo(directoryId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Delete Participants
     * Start participants deletion, from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt;  &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> deleteParticipantsInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteParticipantsInDirectoryValidateBeforeCall(directoryId, requestBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Participants (asynchronously)
     * Start participants deletion, from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt;  &lt;!-- theme: warning --&gt; &gt; ## Including More Than 25,000 Participant IDs Returns &#x60;HTTP 413&#x60; Error &gt; Including more than 25,000 Participant IDs in a request will return a &#x60;HTTP 413 Request Entity Too Large&#x60; error.   &lt;!-- theme: warning --&gt; &gt; ## Maximum File Size is 10 MB &gt; Maximum file size for upload is 10 MB.   This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @param requestBody List of Unique Identifiers of participants to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParticipantsInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<String> requestBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteParticipantsInDirectoryValidateBeforeCall(directoryId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportParticipantsFromDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportParticipantsFromDirectoryCall(@javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/export-participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportParticipantsFromDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling exportParticipantsFromDirectory(Async)");
        }

        return exportParticipantsFromDirectoryCall(directoryId, _callback);

    }

    /**
     * Export Participants
     * &lt;!-- theme: danger --&gt; &gt;### Deprecated Endpoint &gt;This API is scheduled for deprecation. Instead use the new POST filteredExportParticipantsFromDirectory endpoint, which has expanded functionality.   Start participants export from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). This API not support cx directory yet.  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId exportParticipantsFromDirectory(@javax.annotation.Nonnull String directoryId) throws ApiException {
        ApiResponse<JobId> localVarResp = exportParticipantsFromDirectoryWithHttpInfo(directoryId);
        return localVarResp.getData();
    }

    /**
     * Export Participants
     * &lt;!-- theme: danger --&gt; &gt;### Deprecated Endpoint &gt;This API is scheduled for deprecation. Instead use the new POST filteredExportParticipantsFromDirectory endpoint, which has expanded functionality.   Start participants export from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). This API not support cx directory yet.  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> exportParticipantsFromDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId) throws ApiException {
        okhttp3.Call localVarCall = exportParticipantsFromDirectoryValidateBeforeCall(directoryId, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Participants (asynchronously)
     * &lt;!-- theme: danger --&gt; &gt;### Deprecated Endpoint &gt;This API is scheduled for deprecation. Instead use the new POST filteredExportParticipantsFromDirectory endpoint, which has expanded functionality.   Start participants export from the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs). This API not support cx directory yet.  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportParticipantsFromDirectoryAsync(@javax.annotation.Nonnull String directoryId, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportParticipantsFromDirectoryValidateBeforeCall(directoryId, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filteredExportParticipantsFromDirectory
     * @param directoryId Use ex for employee directory, cx for CX directory, and bx for BX directory (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteredExportParticipantsFromDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataFilter;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/export-participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filteredExportParticipantsFromDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling filteredExportParticipantsFromDirectory(Async)");
        }

        return filteredExportParticipantsFromDirectoryCall(directoryId, metadataFilter, _callback);

    }

    /**
     * Export Participants
     * Start participants export from the specified directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory, cx for CX directory, and bx for BX directory (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId filteredExportParticipantsFromDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter) throws ApiException {
        ApiResponse<JobId> localVarResp = filteredExportParticipantsFromDirectoryWithHttpInfo(directoryId, metadataFilter);
        return localVarResp.getData();
    }

    /**
     * Export Participants
     * Start participants export from the specified directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory, cx for CX directory, and bx for BX directory (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> filteredExportParticipantsFromDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter) throws ApiException {
        okhttp3.Call localVarCall = filteredExportParticipantsFromDirectoryValidateBeforeCall(directoryId, metadataFilter, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Participants (asynchronously)
     * Start participants export from the specified directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten concurrent jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).   ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use ex for employee directory, cx for CX directory, and bx for BX directory (required)
     * @param metadataFilter List of metadata filter for participants export. Provide an empty array to export all participants. If you provide multiple filtering objects, all filters will be applied by the logical AND operator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filteredExportParticipantsFromDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable List<MetadataFilter> metadataFilter, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = filteredExportParticipantsFromDirectoryValidateBeforeCall(directoryId, metadataFilter, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeleteParticipantsJobInDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/delete-participants/{jobId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeleteParticipantsJobInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getDeleteParticipantsJobInDirectory(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getDeleteParticipantsJobInDirectory(Async)");
        }

        return getDeleteParticipantsJobInDirectoryCall(directoryId, jobId, _callback);

    }

    /**
     * Get Delete Participants Status
     * Retrieves the status of the delete participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getDeleteParticipantsJobInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getDeleteParticipantsJobInDirectoryWithHttpInfo(directoryId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Delete Participants Status
     * Retrieves the status of the delete participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getDeleteParticipantsJobInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getDeleteParticipantsJobInDirectoryValidateBeforeCall(directoryId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Delete Participants Status (asynchronously)
     * Retrieves the status of the delete participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeleteParticipantsJobInDirectoryValidateBeforeCall(directoryId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeleteParticipantsJobResultInDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobResultInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/delete-participants/results/{resultId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeleteParticipantsJobResultInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getDeleteParticipantsJobResultInDirectory(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getDeleteParticipantsJobResultInDirectory(Async)");
        }

        return getDeleteParticipantsJobResultInDirectoryCall(directoryId, resultId, _callback);

    }

    /**
     * Get Results for Directory Delete Participants Job
     * Retrieves the results of the participants delete job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getDeleteParticipantsJobResultInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getDeleteParticipantsJobResultInDirectoryWithHttpInfo(directoryId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Directory Delete Participants Job
     * Retrieves the results of the participants delete job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getDeleteParticipantsJobResultInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getDeleteParticipantsJobResultInDirectoryValidateBeforeCall(directoryId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Directory Delete Participants Job (asynchronously)
     * Retrieves the results of the participants delete job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Delete Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeleteParticipantsJobResultInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeleteParticipantsJobResultInDirectoryValidateBeforeCall(directoryId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportParticipantsJobFromDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobFromDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/export-participants/{jobId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportParticipantsJobFromDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getExportParticipantsJobFromDirectory(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getExportParticipantsJobFromDirectory(Async)");
        }

        return getExportParticipantsJobFromDirectoryCall(directoryId, jobId, _callback);

    }

    /**
     * Get Export Participants Status
     * Retrieves the status of the export participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getExportParticipantsJobFromDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getExportParticipantsJobFromDirectoryWithHttpInfo(directoryId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Export Participants Status
     * Retrieves the status of the export participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getExportParticipantsJobFromDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getExportParticipantsJobFromDirectoryValidateBeforeCall(directoryId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export Participants Status (asynchronously)
     * Retrieves the status of the export participants job in the specified employee directory.
     * @param directoryId Use ex for employee directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobFromDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportParticipantsJobFromDirectoryValidateBeforeCall(directoryId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportParticipantsJobResultFromDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobResultFromDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/export-participants/results/{resultId}/file"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportParticipantsJobResultFromDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getExportParticipantsJobResultFromDirectory(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getExportParticipantsJobResultFromDirectory(Async)");
        }

        return getExportParticipantsJobResultFromDirectoryCall(directoryId, resultId, _callback);

    }

    /**
     * Get Results for Directory Export Participants Job
     * Retrieves the results of the participants export job in the specified employee directory.  &lt;!-- theme: info --&gt; &gt; ### Size Limit &gt;If your EX or CX directory exceeds 200,000 users or you are executing the file download from a region outside your datacenter, you may experience timeout errors in those cases. Please contact customer support.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getExportParticipantsJobResultFromDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<File> localVarResp = getExportParticipantsJobResultFromDirectoryWithHttpInfo(directoryId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Directory Export Participants Job
     * Retrieves the results of the participants export job in the specified employee directory.  &lt;!-- theme: info --&gt; &gt; ### Size Limit &gt;If your EX or CX directory exceeds 200,000 users or you are executing the file download from a region outside your datacenter, you may experience timeout errors in those cases. Please contact customer support.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getExportParticipantsJobResultFromDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getExportParticipantsJobResultFromDirectoryValidateBeforeCall(directoryId, resultId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Directory Export Participants Job (asynchronously)
     * Retrieves the results of the participants export job in the specified employee directory.  &lt;!-- theme: info --&gt; &gt; ### Size Limit &gt;If your EX or CX directory exceeds 200,000 users or you are executing the file download from a region outside your datacenter, you may experience timeout errors in those cases. Please contact customer support.
     * @param directoryId Use ex for employee directory (required)
     * @param resultId Result ID from the Export Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result as file </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportParticipantsJobResultFromDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportParticipantsJobResultFromDirectoryValidateBeforeCall(directoryId, resultId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportParticipantsJobInDirectory
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/import-participants/{jobId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportParticipantsJobInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getImportParticipantsJobInDirectory(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getImportParticipantsJobInDirectory(Async)");
        }

        return getImportParticipantsJobInDirectoryCall(directoryId, jobId, _callback);

    }

    /**
     * Get Import Status for Directory Import
     * Retrieves the status of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return JobInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobInfo getImportParticipantsJobInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobInfo> localVarResp = getImportParticipantsJobInDirectoryWithHttpInfo(directoryId, jobId);
        return localVarResp.getData();
    }

    /**
     * Get Import Status for Directory Import
     * Retrieves the status of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @return ApiResponse&lt;JobInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobInfo> getImportParticipantsJobInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = getImportParticipantsJobInDirectoryValidateBeforeCall(directoryId, jobId, null);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Import Status for Directory Import (asynchronously)
     * Retrieves the status of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param jobId ID of the job for which you want status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String jobId, final ApiCallback<JobInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportParticipantsJobInDirectoryValidateBeforeCall(directoryId, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportParticipantsJobResultInDirectory
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobResultInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/import-participants/results/{resultId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "resultId" + "}", localVarApiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportParticipantsJobResultInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getImportParticipantsJobResultInDirectory(Async)");
        }

        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getImportParticipantsJobResultInDirectory(Async)");
        }

        return getImportParticipantsJobResultInDirectoryCall(directoryId, resultId, _callback);

    }

    /**
     * Get Results for Directory Import Participants Job
     * Retrieves the results of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @return JobResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobResult getImportParticipantsJobResultInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        ApiResponse<JobResult> localVarResp = getImportParticipantsJobResultInDirectoryWithHttpInfo(directoryId, resultId);
        return localVarResp.getData();
    }

    /**
     * Get Results for Directory Import Participants Job
     * Retrieves the results of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @return ApiResponse&lt;JobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResult> getImportParticipantsJobResultInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId) throws ApiException {
        okhttp3.Call localVarCall = getImportParticipantsJobResultInDirectoryValidateBeforeCall(directoryId, resultId, null);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Results for Directory Import Participants Job (asynchronously)
     * Retrieves the results of the participants addition or updates job in the specified employee directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param resultId Result ID from the Import Participants Status API response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportParticipantsJobResultInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String resultId, final ApiCallback<JobResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportParticipantsJobResultInDirectoryValidateBeforeCall(directoryId, resultId, _callback);
        Type localVarReturnType = new TypeToken<JobResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantByIdInDirectory
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantId ID of the Participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantByIdInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/participants/{participantId}"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantByIdInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getParticipantByIdInDirectory(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getParticipantByIdInDirectory(Async)");
        }

        return getParticipantByIdInDirectoryCall(directoryId, participantId, _callback);

    }

    /**
     * Get Global Participant
     * Retrieves the specified participant in the global directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantId ID of the Participant (required)
     * @return ParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantResponse getParticipantByIdInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String participantId) throws ApiException {
        ApiResponse<ParticipantResponse> localVarResp = getParticipantByIdInDirectoryWithHttpInfo(directoryId, participantId);
        return localVarResp.getData();
    }

    /**
     * Get Global Participant
     * Retrieves the specified participant in the global directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantId ID of the Participant (required)
     * @return ApiResponse&lt;ParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantResponse> getParticipantByIdInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String participantId) throws ApiException {
        okhttp3.Call localVarCall = getParticipantByIdInDirectoryValidateBeforeCall(directoryId, participantId, null);
        Type localVarReturnType = new TypeToken<ParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Global Participant (asynchronously)
     * Retrieves the specified participant in the global directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantId ID of the Participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantByIdInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nonnull String participantId, final ApiCallback<ParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantByIdInDirectoryValidateBeforeCall(directoryId, participantId, _callback);
        Type localVarReturnType = new TypeToken<ParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsInDirectory
     * @param directoryId Use ex for employee directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (uniqueIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueIdentifier", uniqueIdentifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getParticipantsInDirectory(Async)");
        }

        return getParticipantsInDirectoryCall(directoryId, includeMetadata, skipToken, pageSize, uniqueIdentifier, _callback);

    }

    /**
     * Get All Participants [Deprecated]
     * Please use the POST API instead. Gets all participants, in the specified Directory.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId Use ex for employee directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @return BatchGetParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetParticipantResponse getParticipantsInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String uniqueIdentifier) throws ApiException {
        ApiResponse<BatchGetParticipantResponse> localVarResp = getParticipantsInDirectoryWithHttpInfo(directoryId, includeMetadata, skipToken, pageSize, uniqueIdentifier);
        return localVarResp.getData();
    }

    /**
     * Get All Participants [Deprecated]
     * Please use the POST API instead. Gets all participants, in the specified Directory.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId Use ex for employee directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @return ApiResponse&lt;BatchGetParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetParticipantResponse> getParticipantsInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String uniqueIdentifier) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsInDirectoryValidateBeforeCall(directoryId, includeMetadata, skipToken, pageSize, uniqueIdentifier, null);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Participants [Deprecated] (asynchronously)
     * Please use the POST API instead. Gets all participants, in the specified Directory.  &lt;!-- theme: danger --&gt; &gt; ## Preview Functionality &gt; This API is not yet generally available. It is available as part of Early Access to receive feedback. Be aware that there may be significant changes to this API with short notice until the time that the API is made Generally Available.
     * @param directoryId Use ex for employee directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param skipToken The start position for pagination. Comes back as response body of the previous call, if there is more paginated data (optional)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param uniqueIdentifier Unique Identifier of a specific participant. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable String skipToken, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable String uniqueIdentifier, final ApiCallback<BatchGetParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsInDirectoryValidateBeforeCall(directoryId, includeMetadata, skipToken, pageSize, uniqueIdentifier, _callback);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsInDirectoryPost
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInDirectoryPostCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = participantsSearchRequest;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsInDirectoryPostValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling getParticipantsInDirectoryPost(Async)");
        }

        return getParticipantsInDirectoryPostCall(directoryId, includeMetadata, pageSize, participantsSearchRequest, _callback);

    }

    /**
     * Get All Participants Post
     * Retrieves all participants in the specified directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @return BatchGetParticipantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetParticipantResponse getParticipantsInDirectoryPost(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest) throws ApiException {
        ApiResponse<BatchGetParticipantResponse> localVarResp = getParticipantsInDirectoryPostWithHttpInfo(directoryId, includeMetadata, pageSize, participantsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Get All Participants Post
     * Retrieves all participants in the specified directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @return ApiResponse&lt;BatchGetParticipantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetParticipantResponse> getParticipantsInDirectoryPostWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsInDirectoryPostValidateBeforeCall(directoryId, includeMetadata, pageSize, participantsSearchRequest, null);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Participants Post (asynchronously)
     * Retrieves all participants in the specified directory.
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param includeMetadata Whether metadata should be included or not (default). (optional, default to false)
     * @param pageSize Maximum number of items to return in a given response. (optional, default to 25)
     * @param participantsSearchRequest A uniqueIdentifier can be provided to search for a specific participant (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsInDirectoryPostAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable Boolean includeMetadata, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable ParticipantsSearchRequest participantsSearchRequest, final ApiCallback<BatchGetParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsInDirectoryPostValidateBeforeCall(directoryId, includeMetadata, pageSize, participantsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchGetParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importParticipantsInDirectory
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;. Additionally, in order to send a file, you will need to include in the form data a parameter called file whose value is the path to your local file, like below:  &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/employee-directories/{directoryId}/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importParticipantsInDirectoryCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = participantImportBody;

        // create path and map variables
        String localVarPath = "/employee-directories/{directoryId}/import-participants"
            .replace("{" + "directoryId" + "}", localVarApiClient.escapeString(directoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importParticipantsInDirectoryValidateBeforeCall(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling importParticipantsInDirectory(Async)");
        }

        return importParticipantsInDirectoryCall(directoryId, participantImportBody, _callback);

    }

    /**
     * Import Participants
     * Start participants addition or updates to the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;. Additionally, in order to send a file, you will need to include in the form data a parameter called file whose value is the path to your local file, like below:  &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/employee-directories/{directoryId}/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public JobId importParticipantsInDirectory(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable ParticipantImportBody participantImportBody) throws ApiException {
        ApiResponse<JobId> localVarResp = importParticipantsInDirectoryWithHttpInfo(directoryId, participantImportBody);
        return localVarResp.getData();
    }

    /**
     * Import Participants
     * Start participants addition or updates to the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;. Additionally, in order to send a file, you will need to include in the form data a parameter called file whose value is the path to your local file, like below:  &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/employee-directories/{directoryId}/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> importParticipantsInDirectoryWithHttpInfo(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable ParticipantImportBody participantImportBody) throws ApiException {
        okhttp3.Call localVarCall = importParticipantsInDirectoryValidateBeforeCall(directoryId, participantImportBody, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import Participants (asynchronously)
     * Start participants addition or updates to the specified employee directory.  &lt;!-- theme: warning --&gt; &gt; ## Starting More Than Ten Concurrent Jobs Results in &#x60;HTTP 409&#x60; Error &gt; This API starts an asychronous job for a project on our servers. If you try to create more than ten jobs of any kind for any project, the eleventh job will return a 409 error. Please catch that error and handle it appropriately (do not continue to try to start new jobs).  ## Processing Order of Jobs The processing order for jobs is first in, first out for each job context (where the job was started). Jobs in different projects can run concurrently, but only one job from each context can run at one time. Global Directory jobs will not start until all jobs started in a different context are complete. Also, no other jobs can run concurrently with Global Directory jobs. Jobs started while Global Directory jobs are processing must wait until the Global Directory jobs finish before they can begin to process.  Here is an example queue showing order of job processing based on the jobs&#39; contexts and projects.   | Jobs                    | Process                                                                                             | |-------------------------|-----------------------------------------------------------------------------------------------------| | Job 1: Project A        |                                                                                                     | | Job 2: Project B        | Job 1 and Job 2 can run simultaneously, because they are in different projects.                     | | Job 3: Global Directory | Job 1 and Job 2 must finish before Job 3 can run, because Job 3 is a Global Directory job.          | | Job 4: Global Directory | Job 3 must finish before Job 4 can run, because they&#39;re in the same job context (Global Directory). | | Job 5: Project A        | Job 4 must finish before Job 5 can runâ€”it has a different context than Global Directory.            | | Job 6: Project A        | Job 5 must finish before Job 6 can run because they share a project.                                |
     * @param directoryId Use \&quot;ex\&quot; for employee directory, \&quot;cx\&quot; for CX directory and \&quot;bx\&quot; for BX directory (required)
     * @param participantImportBody You can send a json object directly in an &#x60;application/json&#x60; call for importing participants. When importing with json, only metadata fields that are common across all imported participants will be honored for the import - all others will be excluded. Alternatively, you can create a &#x60;.csv&#x60; file and upload the file as part of the request. To send a file, you&#39;ll need to make the application type &#x60;multipart/form-data&#x60;. Additionally, in order to send a file, you will need to include in the form data a parameter called file whose value is the path to your local file, like below:  &#x60;&#x60;&#x60; Unique Identifier,FirstName,LastName,Email,Username,Metadata1,Metadata2 f1@qualt.com,f1,l1,f1@qualt.com,f1@qualt.com,val11,val21 f2@qualt.com,f2,l2,f2@qualt.com,f2@qualt.com,val12,val22 &#x60;&#x60;&#x60;  Additionally, in order to send a file, you will need to include in the form data a parameter called &#x60;file&#x60; whose value is the path to your local file, like below:   &#x60;&#x60;&#x60; shell curl --location --request POST https://ca1.qualtrics.com/employee-directories/{directoryId}/import-participants \\ --header &#39;Content-Type: multipart/form-data&#39; \\ --header &#39;Authorization: Bearer 87c15cec-b36e-4972-a94b-8185f5f78be9&#39; \\ --form &#39;file&#x3D;@\&quot;myParticipants.csv\&quot;&#39; &#x60;&#x60;&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importParticipantsInDirectoryAsync(@javax.annotation.Nonnull String directoryId, @javax.annotation.Nullable ParticipantImportBody participantImportBody, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = importParticipantsInDirectoryValidateBeforeCall(directoryId, participantImportBody, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
