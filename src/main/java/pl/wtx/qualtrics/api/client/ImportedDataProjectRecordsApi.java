/*
 * Qualtrics API
 * This is the API specification for Qualtrics platform.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.qualtrics.api.client;

import pl.wtx.qualtrics.api.client.invoker.ApiCallback;
import pl.wtx.qualtrics.api.client.invoker.ApiClient;
import pl.wtx.qualtrics.api.client.invoker.ApiException;
import pl.wtx.qualtrics.api.client.invoker.ApiResponse;
import pl.wtx.qualtrics.api.client.invoker.Configuration;
import pl.wtx.qualtrics.api.client.invoker.Pair;
import pl.wtx.qualtrics.api.client.invoker.ProgressRequestBody;
import pl.wtx.qualtrics.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.qualtrics.api.client.model.DefaultEmptyResponse;
import pl.wtx.qualtrics.api.client.model.DefaultErrorResponse;
import pl.wtx.qualtrics.api.client.model.GetRecordResponse;
import pl.wtx.qualtrics.api.client.model.PartialFailureResponse;
import pl.wtx.qualtrics.api.client.model.PostRecordsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportedDataProjectRecordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportedDataProjectRecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportedDataProjectRecordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteRecord
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Record is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/records/{uniqueField}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()))
            .replace("{" + "uniqueField" + "}", localVarApiClient.escapeString(uniqueField.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling deleteRecord(Async)");
        }

        // verify the required parameter 'uniqueField' is set
        if (uniqueField == null) {
            throw new ApiException("Missing the required parameter 'uniqueField' when calling deleteRecord(Async)");
        }

        return deleteRecordCall(idpSourceId, uniqueField, _callback);

    }

    /**
     * Delete a Record from Imported Data Project
     * Synchronously deletes a record from the IDP.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @return DefaultEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Record is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public DefaultEmptyResponse deleteRecord(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField) throws ApiException {
        ApiResponse<DefaultEmptyResponse> localVarResp = deleteRecordWithHttpInfo(idpSourceId, uniqueField);
        return localVarResp.getData();
    }

    /**
     * Delete a Record from Imported Data Project
     * Synchronously deletes a record from the IDP.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @return ApiResponse&lt;DefaultEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Record is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultEmptyResponse> deleteRecordWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(idpSourceId, uniqueField, null);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Record from Imported Data Project (asynchronously)
     * Synchronously deletes a record from the IDP.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Record is deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback<DefaultEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(idpSourceId, uniqueField, _callback);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecord
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/records/{uniqueField}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()))
            .replace("{" + "uniqueField" + "}", localVarApiClient.escapeString(uniqueField.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling getRecord(Async)");
        }

        // verify the required parameter 'uniqueField' is set
        if (uniqueField == null) {
            throw new ApiException("Missing the required parameter 'uniqueField' when calling getRecord(Async)");
        }

        return getRecordCall(idpSourceId, uniqueField, _callback);

    }

    /**
     * Get a Record from Imported Data Project
     * Retrieves a record from the IDP. 
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @return GetRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordResponse getRecord(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField) throws ApiException {
        ApiResponse<GetRecordResponse> localVarResp = getRecordWithHttpInfo(idpSourceId, uniqueField);
        return localVarResp.getData();
    }

    /**
     * Get a Record from Imported Data Project
     * Retrieves a record from the IDP. 
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @return ApiResponse&lt;GetRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecordResponse> getRecordWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(idpSourceId, uniqueField, null);
        Type localVarReturnType = new TypeToken<GetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Record from Imported Data Project (asynchronously)
     * Retrieves a record from the IDP. 
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, final ApiCallback<GetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(idpSourceId, uniqueField, _callback);
        Type localVarReturnType = new TypeToken<GetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postRecords
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param postRecordsRequest Describes the records being added to the IDP (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Records are successfully added </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some rows may have failed due to high load or other issues, these failed rows should be retried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRecordsCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable PostRecordsRequest postRecordsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postRecordsRequest;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/records"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRecordsValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable PostRecordsRequest postRecordsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling postRecords(Async)");
        }

        return postRecordsCall(idpSourceId, postRecordsRequest, _callback);

    }

    /**
     * Add Records to Imported Data Project
     * Synchronously adds records to the IDP. Up to 50 records can be posted at a time.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param postRecordsRequest Describes the records being added to the IDP (optional)
     * @return DefaultEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Records are successfully added </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some rows may have failed due to high load or other issues, these failed rows should be retried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public DefaultEmptyResponse postRecords(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable PostRecordsRequest postRecordsRequest) throws ApiException {
        ApiResponse<DefaultEmptyResponse> localVarResp = postRecordsWithHttpInfo(idpSourceId, postRecordsRequest);
        return localVarResp.getData();
    }

    /**
     * Add Records to Imported Data Project
     * Synchronously adds records to the IDP. Up to 50 records can be posted at a time.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param postRecordsRequest Describes the records being added to the IDP (optional)
     * @return ApiResponse&lt;DefaultEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Records are successfully added </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some rows may have failed due to high load or other issues, these failed rows should be retried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultEmptyResponse> postRecordsWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable PostRecordsRequest postRecordsRequest) throws ApiException {
        okhttp3.Call localVarCall = postRecordsValidateBeforeCall(idpSourceId, postRecordsRequest, null);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Records to Imported Data Project (asynchronously)
     * Synchronously adds records to the IDP. Up to 50 records can be posted at a time.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param postRecordsRequest Describes the records being added to the IDP (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Records are successfully added </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some rows may have failed due to high load or other issues, these failed rows should be retried </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRecordsAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nullable PostRecordsRequest postRecordsRequest, final ApiCallback<DefaultEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRecordsValidateBeforeCall(idpSourceId, postRecordsRequest, _callback);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRecord
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param nonDestructive  (optional, default to false)
     * @param requestBody Describes the record being updated in the IDP (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, @javax.annotation.Nullable Boolean nonDestructive, @javax.annotation.Nullable Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/imported-data-projects/{idpSourceId}/records/{uniqueField}"
            .replace("{" + "idpSourceId" + "}", localVarApiClient.escapeString(idpSourceId.toString()))
            .replace("{" + "uniqueField" + "}", localVarApiClient.escapeString(uniqueField.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nonDestructive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonDestructive", nonDestructive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_token", "public_oauth2", "public_oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, @javax.annotation.Nullable Boolean nonDestructive, @javax.annotation.Nullable Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idpSourceId' is set
        if (idpSourceId == null) {
            throw new ApiException("Missing the required parameter 'idpSourceId' when calling updateRecord(Async)");
        }

        // verify the required parameter 'uniqueField' is set
        if (uniqueField == null) {
            throw new ApiException("Missing the required parameter 'uniqueField' when calling updateRecord(Async)");
        }

        return updateRecordCall(idpSourceId, uniqueField, nonDestructive, requestBody, _callback);

    }

    /**
     * Update a Record in an Imported Data Project
     * Synchronously updates data in an IDP.   &lt;!-- theme: danger --&gt;  ### Possible Accidental Data Deletion   If &#x60;nonDestructive&#x60; is &#x60;false&#x60;, or not set, any fields missing from the PUT body will be missing on the record after the call is executed.   Make sure your update has the intended result by getting the data you intend to update first, then modifying from there, or by explicitly setting nonDestructive to true.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param nonDestructive  (optional, default to false)
     * @param requestBody Describes the record being updated in the IDP (optional)
     * @return DefaultEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public DefaultEmptyResponse updateRecord(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, @javax.annotation.Nullable Boolean nonDestructive, @javax.annotation.Nullable Map<String, Object> requestBody) throws ApiException {
        ApiResponse<DefaultEmptyResponse> localVarResp = updateRecordWithHttpInfo(idpSourceId, uniqueField, nonDestructive, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update a Record in an Imported Data Project
     * Synchronously updates data in an IDP.   &lt;!-- theme: danger --&gt;  ### Possible Accidental Data Deletion   If &#x60;nonDestructive&#x60; is &#x60;false&#x60;, or not set, any fields missing from the PUT body will be missing on the record after the call is executed.   Make sure your update has the intended result by getting the data you intend to update first, then modifying from there, or by explicitly setting nonDestructive to true.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param nonDestructive  (optional, default to false)
     * @param requestBody Describes the record being updated in the IDP (optional)
     * @return ApiResponse&lt;DefaultEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultEmptyResponse> updateRecordWithHttpInfo(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, @javax.annotation.Nullable Boolean nonDestructive, @javax.annotation.Nullable Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(idpSourceId, uniqueField, nonDestructive, requestBody, null);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Record in an Imported Data Project (asynchronously)
     * Synchronously updates data in an IDP.   &lt;!-- theme: danger --&gt;  ### Possible Accidental Data Deletion   If &#x60;nonDestructive&#x60; is &#x60;false&#x60;, or not set, any fields missing from the PUT body will be missing on the record after the call is executed.   Make sure your update has the intended result by getting the data you intend to update first, then modifying from there, or by explicitly setting nonDestructive to true.
     * @param idpSourceId [Source ID](https://api.qualtrics.com/97e48a222eef2-imported-data-project-api#retrieve-idpsourceid-for-an-existing-imported-data-project) for Imported Data Project. (required)
     * @param uniqueField The unique ID for the row in the &#x60;uniqueField&#x60;. (required)
     * @param nonDestructive  (optional, default to false)
     * @param requestBody Describes the record being updated in the IDP (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> IDP Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordAsync(@javax.annotation.Nonnull String idpSourceId, @javax.annotation.Nonnull String uniqueField, @javax.annotation.Nullable Boolean nonDestructive, @javax.annotation.Nullable Map<String, Object> requestBody, final ApiCallback<DefaultEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(idpSourceId, uniqueField, nonDestructive, requestBody, _callback);
        Type localVarReturnType = new TypeToken<DefaultEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
